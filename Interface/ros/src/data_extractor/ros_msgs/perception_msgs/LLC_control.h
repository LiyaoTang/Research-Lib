// Generated by gencpp from file perception_msgs/LLC_control.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_LLC_CONTROL_H
#define PERCEPTION_MSGS_MESSAGE_LLC_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct LLC_control_
{
  typedef LLC_control_<ContainerAllocator> Type;

  LLC_control_()
    : header()
    , LLC_WhlAng_Stp_Deg(0.0)
    , LLC_WhlAng_Spd_Req(0.0)
    , LLC_AxStpStatus(0.0)
    , LLC_Ax_StpBrake_ms2(0.0)
    , LLC_Pres_StpBrake_Bar(0.0)
    , LLC_ThrottletSet(0.0)
    , LLC_GearControlAuto(0.0)
    , source_ids()  {
    }
  LLC_control_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , LLC_WhlAng_Stp_Deg(0.0)
    , LLC_WhlAng_Spd_Req(0.0)
    , LLC_AxStpStatus(0.0)
    , LLC_Ax_StpBrake_ms2(0.0)
    , LLC_Pres_StpBrake_Bar(0.0)
    , LLC_ThrottletSet(0.0)
    , LLC_GearControlAuto(0.0)
    , source_ids(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _LLC_WhlAng_Stp_Deg_type;
  _LLC_WhlAng_Stp_Deg_type LLC_WhlAng_Stp_Deg;

   typedef double _LLC_WhlAng_Spd_Req_type;
  _LLC_WhlAng_Spd_Req_type LLC_WhlAng_Spd_Req;

   typedef double _LLC_AxStpStatus_type;
  _LLC_AxStpStatus_type LLC_AxStpStatus;

   typedef double _LLC_Ax_StpBrake_ms2_type;
  _LLC_Ax_StpBrake_ms2_type LLC_Ax_StpBrake_ms2;

   typedef double _LLC_Pres_StpBrake_Bar_type;
  _LLC_Pres_StpBrake_Bar_type LLC_Pres_StpBrake_Bar;

   typedef double _LLC_ThrottletSet_type;
  _LLC_ThrottletSet_type LLC_ThrottletSet;

   typedef double _LLC_GearControlAuto_type;
  _LLC_GearControlAuto_type LLC_GearControlAuto;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _source_ids_type;
  _source_ids_type source_ids;





  typedef boost::shared_ptr< ::perception_msgs::LLC_control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::LLC_control_<ContainerAllocator> const> ConstPtr;

}; // struct LLC_control_

typedef ::perception_msgs::LLC_control_<std::allocator<void> > LLC_control;

typedef boost::shared_ptr< ::perception_msgs::LLC_control > LLC_controlPtr;
typedef boost::shared_ptr< ::perception_msgs::LLC_control const> LLC_controlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::LLC_control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::LLC_control_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::LLC_control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::LLC_control_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::LLC_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::LLC_control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::LLC_control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::LLC_control_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::LLC_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "236f0dc9714e3fd58937c47ef2430f76";
  }

  static const char* value(const ::perception_msgs::LLC_control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x236f0dc9714e3fd5ULL;
  static const uint64_t static_value2 = 0x8937c47ef2430f76ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::LLC_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/LLC_control";
  }

  static const char* value(const ::perception_msgs::LLC_control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::LLC_control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# time information\n\
Header header\n\
\n\
float64 LLC_WhlAng_Stp_Deg # 方向盘转角请求，单位degree，左转为正，右转为负。\n\
float64 LLC_WhlAng_Spd_Req # 方向盘转速请求，一般为100。\n\
float64 LLC_AxStpStatus #  制动请求类型：\n\
			# 0: No Action\n\
			# 1: Apply by Ax_setp\n\
			# 2: Apply by pressure\n\
			# 3: Park Brake\n\
			# 4: Precharge\n\
			# 5: Full Brake\n\
\n\
float64 LLC_Ax_StpBrake_ms2 # 制动减速度请求，单位m/s2。只有当LLC_AxStpStatus=1时，该值有效。\n\
float64 LLC_Pres_StpBrake_Bar # 制动压力请求，单位bar。只有当LLC_AxStpStatus=2时，该值有效。\n\
float64 LLC_ThrottletSet # 油门开度请求，0-1。1表示全油门驱动\n\
float64 LLC_GearControlAuto # 换挡请求\n\
			    # -9 = position P (corresponds to gear number -9)\n\
			    # -1 = position R (corresponds to gear number -1...-8)\n\
			    # 0 = position N (corresponds to gear number =0)\n\
			    # 1 = position D (corresponds to gear number >0)\n\
			    # 2 = position M (manual gear selection / Manumatic)\n\
\n\
uint32[] source_ids  # 1. road infos  2. vehicle infos  3. vehicle speed 4,cpt  5,steerAngle \n\
			# 6,Inner_monitor\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::perception_msgs::LLC_control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::LLC_control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.LLC_WhlAng_Stp_Deg);
      stream.next(m.LLC_WhlAng_Spd_Req);
      stream.next(m.LLC_AxStpStatus);
      stream.next(m.LLC_Ax_StpBrake_ms2);
      stream.next(m.LLC_Pres_StpBrake_Bar);
      stream.next(m.LLC_ThrottletSet);
      stream.next(m.LLC_GearControlAuto);
      stream.next(m.source_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LLC_control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::LLC_control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::LLC_control_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "LLC_WhlAng_Stp_Deg: ";
    Printer<double>::stream(s, indent + "  ", v.LLC_WhlAng_Stp_Deg);
    s << indent << "LLC_WhlAng_Spd_Req: ";
    Printer<double>::stream(s, indent + "  ", v.LLC_WhlAng_Spd_Req);
    s << indent << "LLC_AxStpStatus: ";
    Printer<double>::stream(s, indent + "  ", v.LLC_AxStpStatus);
    s << indent << "LLC_Ax_StpBrake_ms2: ";
    Printer<double>::stream(s, indent + "  ", v.LLC_Ax_StpBrake_ms2);
    s << indent << "LLC_Pres_StpBrake_Bar: ";
    Printer<double>::stream(s, indent + "  ", v.LLC_Pres_StpBrake_Bar);
    s << indent << "LLC_ThrottletSet: ";
    Printer<double>::stream(s, indent + "  ", v.LLC_ThrottletSet);
    s << indent << "LLC_GearControlAuto: ";
    Printer<double>::stream(s, indent + "  ", v.LLC_GearControlAuto);
    s << indent << "source_ids[]" << std::endl;
    for (size_t i = 0; i < v.source_ids.size(); ++i)
    {
      s << indent << "  source_ids[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.source_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_LLC_CONTROL_H
