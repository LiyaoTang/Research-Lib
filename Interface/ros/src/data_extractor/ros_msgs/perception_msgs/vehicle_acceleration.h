// Generated by gencpp from file perception_msgs/vehicle_acceleration.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_VEHICLE_ACCELERATION_H
#define PERCEPTION_MSGS_MESSAGE_VEHICLE_ACCELERATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct vehicle_acceleration_
{
  typedef vehicle_acceleration_<ContainerAllocator> Type;

  vehicle_acceleration_()
    : header()
    , lateral_acceleration_isvalid(false)
    , longitudinal_acceleration_isvalid(false)
    , vertical_acceleration_isvalid(false)
    , lateral_acceleration(0.0)
    , longitudinal_acceleration(0.0)
    , vertical_acceleration(0.0)  {
    }
  vehicle_acceleration_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lateral_acceleration_isvalid(false)
    , longitudinal_acceleration_isvalid(false)
    , vertical_acceleration_isvalid(false)
    , lateral_acceleration(0.0)
    , longitudinal_acceleration(0.0)
    , vertical_acceleration(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _lateral_acceleration_isvalid_type;
  _lateral_acceleration_isvalid_type lateral_acceleration_isvalid;

   typedef uint8_t _longitudinal_acceleration_isvalid_type;
  _longitudinal_acceleration_isvalid_type longitudinal_acceleration_isvalid;

   typedef uint8_t _vertical_acceleration_isvalid_type;
  _vertical_acceleration_isvalid_type vertical_acceleration_isvalid;

   typedef double _lateral_acceleration_type;
  _lateral_acceleration_type lateral_acceleration;

   typedef double _longitudinal_acceleration_type;
  _longitudinal_acceleration_type longitudinal_acceleration;

   typedef double _vertical_acceleration_type;
  _vertical_acceleration_type vertical_acceleration;





  typedef boost::shared_ptr< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> const> ConstPtr;

}; // struct vehicle_acceleration_

typedef ::perception_msgs::vehicle_acceleration_<std::allocator<void> > vehicle_acceleration;

typedef boost::shared_ptr< ::perception_msgs::vehicle_acceleration > vehicle_accelerationPtr;
typedef boost::shared_ptr< ::perception_msgs::vehicle_acceleration const> vehicle_accelerationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::vehicle_acceleration_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7025bde89d23ceebd63f39eac7f00ac5";
  }

  static const char* value(const ::perception_msgs::vehicle_acceleration_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7025bde89d23ceebULL;
  static const uint64_t static_value2 = 0xd63f39eac7f00ac5ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/vehicle_acceleration";
  }

  static const char* value(const ::perception_msgs::vehicle_acceleration_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
bool lateral_acceleration_isvalid\n\
bool longitudinal_acceleration_isvalid\n\
bool vertical_acceleration_isvalid\n\
\n\
float64 lateral_acceleration       # 横向加速度,单位 m/s2 ,取值[-327.68,327.67] \n\
float64 longitudinal_acceleration  # 纵向加速度,单位 m/s2 ,取值[-327.68,327.67] \n\
float64 vertical_acceleration      # 垂直加速度,单位 m/s2 ,取值[-327.68,327.67] \n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::perception_msgs::vehicle_acceleration_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lateral_acceleration_isvalid);
      stream.next(m.longitudinal_acceleration_isvalid);
      stream.next(m.vertical_acceleration_isvalid);
      stream.next(m.lateral_acceleration);
      stream.next(m.longitudinal_acceleration);
      stream.next(m.vertical_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vehicle_acceleration_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::vehicle_acceleration_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::vehicle_acceleration_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lateral_acceleration_isvalid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.lateral_acceleration_isvalid);
    s << indent << "longitudinal_acceleration_isvalid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.longitudinal_acceleration_isvalid);
    s << indent << "vertical_acceleration_isvalid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vertical_acceleration_isvalid);
    s << indent << "lateral_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.lateral_acceleration);
    s << indent << "longitudinal_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.longitudinal_acceleration);
    s << indent << "vertical_acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_VEHICLE_ACCELERATION_H
