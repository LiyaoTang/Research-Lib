// Generated by gencpp from file perception_msgs/visual_object_info.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_VISUAL_OBJECT_INFO_H
#define PERCEPTION_MSGS_MESSAGE_VISUAL_OBJECT_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_msgs
{
template <class ContainerAllocator>
struct visual_object_info_
{
  typedef visual_object_info_<ContainerAllocator> Type;

  visual_object_info_()
    : parts(0)
    , pts8()
    , front_upper_left()
    , front_lower_right()
    , back_upper_left()
    , back_lower_right()
    , turn_signal_light(0)
    , brake_light(0)
    , type(0)
    , type_probs()
    , object_feature()
    , internal_type(0)
    , internal_type_probs()
    , upper_left()
    , lower_right()
    , upper_left_tmp()
    , lower_right_tmp()
    , alpha(0.0)
    , score(0.0)
    , truncated_horizontal(0.0)
    , truncated_vertical(0.0)
    , direction()
    , theta(0.0)
    , center()
    , position_uncertainty()
    , velocity_uncertainty()
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , distance(0.0)
    , distance_status(0)
    , azimuth(0.0)
    , track_id(0)
    , track_score(0.0)
    , velocity()
    , tracking_time(0.0)
    , latest_tracked_time(0.0)  {
    }
  visual_object_info_(const ContainerAllocator& _alloc)
    : parts(0)
    , pts8(_alloc)
    , front_upper_left(_alloc)
    , front_lower_right(_alloc)
    , back_upper_left(_alloc)
    , back_lower_right(_alloc)
    , turn_signal_light(0)
    , brake_light(0)
    , type(0)
    , type_probs(_alloc)
    , object_feature(_alloc)
    , internal_type(0)
    , internal_type_probs(_alloc)
    , upper_left(_alloc)
    , lower_right(_alloc)
    , upper_left_tmp(_alloc)
    , lower_right_tmp(_alloc)
    , alpha(0.0)
    , score(0.0)
    , truncated_horizontal(0.0)
    , truncated_vertical(0.0)
    , direction(_alloc)
    , theta(0.0)
    , center(_alloc)
    , position_uncertainty(_alloc)
    , velocity_uncertainty(_alloc)
    , length(0.0)
    , width(0.0)
    , height(0.0)
    , distance(0.0)
    , distance_status(0)
    , azimuth(0.0)
    , track_id(0)
    , track_score(0.0)
    , velocity(_alloc)
    , tracking_time(0.0)
    , latest_tracked_time(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _parts_type;
  _parts_type parts;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _pts8_type;
  _pts8_type pts8;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _front_upper_left_type;
  _front_upper_left_type front_upper_left;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _front_lower_right_type;
  _front_lower_right_type front_lower_right;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _back_upper_left_type;
  _back_upper_left_type back_upper_left;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _back_lower_right_type;
  _back_lower_right_type back_lower_right;

   typedef int32_t _turn_signal_light_type;
  _turn_signal_light_type turn_signal_light;

   typedef int32_t _brake_light_type;
  _brake_light_type brake_light;

   typedef int32_t _type_type;
  _type_type type;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _type_probs_type;
  _type_probs_type type_probs;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _object_feature_type;
  _object_feature_type object_feature;

   typedef int32_t _internal_type_type;
  _internal_type_type internal_type;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _internal_type_probs_type;
  _internal_type_probs_type internal_type_probs;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _upper_left_type;
  _upper_left_type upper_left;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lower_right_type;
  _lower_right_type lower_right;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _upper_left_tmp_type;
  _upper_left_tmp_type upper_left_tmp;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _lower_right_tmp_type;
  _lower_right_tmp_type lower_right_tmp;

   typedef double _alpha_type;
  _alpha_type alpha;

   typedef double _score_type;
  _score_type score;

   typedef double _truncated_horizontal_type;
  _truncated_horizontal_type truncated_horizontal;

   typedef double _truncated_vertical_type;
  _truncated_vertical_type truncated_vertical;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _direction_type;
  _direction_type direction;

   typedef double _theta_type;
  _theta_type theta;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _center_type;
  _center_type center;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_uncertainty_type;
  _position_uncertainty_type position_uncertainty;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_uncertainty_type;
  _velocity_uncertainty_type velocity_uncertainty;

   typedef double _length_type;
  _length_type length;

   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef double _distance_type;
  _distance_type distance;

   typedef int32_t _distance_status_type;
  _distance_status_type distance_status;

   typedef double _azimuth_type;
  _azimuth_type azimuth;

   typedef int32_t _track_id_type;
  _track_id_type track_id;

   typedef double _track_score_type;
  _track_score_type track_score;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _velocity_type;
  _velocity_type velocity;

   typedef double _tracking_time_type;
  _tracking_time_type tracking_time;

   typedef double _latest_tracked_time_type;
  _latest_tracked_time_type latest_tracked_time;



  enum {
    id = 0,
  };


  typedef boost::shared_ptr< ::perception_msgs::visual_object_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::visual_object_info_<ContainerAllocator> const> ConstPtr;

}; // struct visual_object_info_

typedef ::perception_msgs::visual_object_info_<std::allocator<void> > visual_object_info;

typedef boost::shared_ptr< ::perception_msgs::visual_object_info > visual_object_infoPtr;
typedef boost::shared_ptr< ::perception_msgs::visual_object_info const> visual_object_infoConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::visual_object_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::visual_object_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::visual_object_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::visual_object_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::visual_object_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::visual_object_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::visual_object_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::visual_object_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::visual_object_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d92885c145b1505b3ad25d7009a8333";
  }

  static const char* value(const ::perception_msgs::visual_object_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d92885c145b1505ULL;
  static const uint64_t static_value2 = 0xb3ad25d7009a8333ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::visual_object_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/visual_object_info";
  }

  static const char* value(const ::perception_msgs::visual_object_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::visual_object_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 parts\n\
float64[] pts8                   #//2Dto3D, pts8.resize(16), x, y...\n\
float64[] front_upper_left         #//front box upper-left corner: x1, y1\n\
float64[] front_lower_right        #//front box  lower-right corner: x2, y2\n\
float64[] back_upper_left            #//front box upper-left corner: x1, y1\n\
float64[] back_lower_right           #//front box  lower-right corner: x2, y2\n\
int32 id = 0                         #// object id per frame\n\
int32 turn_signal_light\n\
int32 brake_light\n\
int32 type                           #// Object classification type.\n\
float64[] type_probs                 #// Probability of each type, used for track type.\n\
float64[] object_feature\n\
int32 internal_type                  #// Internal object classification type.\n\
float64[] internal_type_probs   #// Internal probability of each type, used for track type.\n\
\n\
#// 2D bounding box information (in pixel)\n\
#// upper-left corner: x1, y1\n\
float64[] upper_left\n\
#// lower-right corner: x2, y2\n\
float64[] lower_right\n\
#// tmp for upper-left & lower-right corner point\n\
float64[] upper_left_tmp\n\
float64[] lower_right_tmp\n\
\n\
#// this is `alpha` angle from KITTI: Observation angle of object, ranging [-pi..pi]\n\
float64 alpha\n\
float64 score\n\
#// Truncation ratio prediction from DNN. 0.0 means non-truncated box ( or < threshold, ex: 0.05)\n\
float64 truncated_horizontal\n\
float64 truncated_vertical\n\
\n\
#// 3D bounding box information\n\
#// main direction\n\
float64[] direction\n\
\n\
#// the yaw angle, theta = 0.0 <=> direction = (1, 0, 0)\n\
#// `theta` is `rotation_y` from KITTI: Rotation ry around Y-axis\n\
#// in camera coordinates before track [-pi..pi]\n\
#// in world coordinates in and after track [-pi..pi]\n\
float64 theta\n\
\n\
#// GROUND center of the object (cx, cy, z_min)\n\
#// From the 2409 test data, it's just the CENTER of the object (cx, cy, cz)\n\
#// in camera coordinates before track [-pi..pi]\n\
#// in world coordinates in and after track [-pi..pi]\n\
float64[] center\n\
\n\
float64[] position_uncertainty#// noise covariance matrix for uncertainty of position and velocity\n\
float64[] velocity_uncertainty\n\
\n\
#// size of the oriented bbox, length is the size in the main direction\n\
float64 length\n\
float64 width\n\
float64 height\n\
\n\
float64 distance    #// Distance to object physical center from lidar origin\n\
int32 distance_status\n\
\n\
float64 azimuth     #// Azimuth angle viewed in lidar space (radian)\n\
\n\
int32 track_id      #// tracking information\n\
float64 track_score\n\
float64[] velocity\n\
\n\
float64 tracking_time       #// age of the tracked object\n\
float64 latest_tracked_time\n\
";
  }

  static const char* value(const ::perception_msgs::visual_object_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::visual_object_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parts);
      stream.next(m.pts8);
      stream.next(m.front_upper_left);
      stream.next(m.front_lower_right);
      stream.next(m.back_upper_left);
      stream.next(m.back_lower_right);
      stream.next(m.turn_signal_light);
      stream.next(m.brake_light);
      stream.next(m.type);
      stream.next(m.type_probs);
      stream.next(m.object_feature);
      stream.next(m.internal_type);
      stream.next(m.internal_type_probs);
      stream.next(m.upper_left);
      stream.next(m.lower_right);
      stream.next(m.upper_left_tmp);
      stream.next(m.lower_right_tmp);
      stream.next(m.alpha);
      stream.next(m.score);
      stream.next(m.truncated_horizontal);
      stream.next(m.truncated_vertical);
      stream.next(m.direction);
      stream.next(m.theta);
      stream.next(m.center);
      stream.next(m.position_uncertainty);
      stream.next(m.velocity_uncertainty);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.distance);
      stream.next(m.distance_status);
      stream.next(m.azimuth);
      stream.next(m.track_id);
      stream.next(m.track_score);
      stream.next(m.velocity);
      stream.next(m.tracking_time);
      stream.next(m.latest_tracked_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct visual_object_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::visual_object_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::visual_object_info_<ContainerAllocator>& v)
  {
    s << indent << "parts: ";
    Printer<int32_t>::stream(s, indent + "  ", v.parts);
    s << indent << "pts8[]" << std::endl;
    for (size_t i = 0; i < v.pts8.size(); ++i)
    {
      s << indent << "  pts8[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.pts8[i]);
    }
    s << indent << "front_upper_left[]" << std::endl;
    for (size_t i = 0; i < v.front_upper_left.size(); ++i)
    {
      s << indent << "  front_upper_left[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.front_upper_left[i]);
    }
    s << indent << "front_lower_right[]" << std::endl;
    for (size_t i = 0; i < v.front_lower_right.size(); ++i)
    {
      s << indent << "  front_lower_right[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.front_lower_right[i]);
    }
    s << indent << "back_upper_left[]" << std::endl;
    for (size_t i = 0; i < v.back_upper_left.size(); ++i)
    {
      s << indent << "  back_upper_left[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.back_upper_left[i]);
    }
    s << indent << "back_lower_right[]" << std::endl;
    for (size_t i = 0; i < v.back_lower_right.size(); ++i)
    {
      s << indent << "  back_lower_right[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.back_lower_right[i]);
    }
    s << indent << "turn_signal_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.turn_signal_light);
    s << indent << "brake_light: ";
    Printer<int32_t>::stream(s, indent + "  ", v.brake_light);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "type_probs[]" << std::endl;
    for (size_t i = 0; i < v.type_probs.size(); ++i)
    {
      s << indent << "  type_probs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.type_probs[i]);
    }
    s << indent << "object_feature[]" << std::endl;
    for (size_t i = 0; i < v.object_feature.size(); ++i)
    {
      s << indent << "  object_feature[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.object_feature[i]);
    }
    s << indent << "internal_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.internal_type);
    s << indent << "internal_type_probs[]" << std::endl;
    for (size_t i = 0; i < v.internal_type_probs.size(); ++i)
    {
      s << indent << "  internal_type_probs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.internal_type_probs[i]);
    }
    s << indent << "upper_left[]" << std::endl;
    for (size_t i = 0; i < v.upper_left.size(); ++i)
    {
      s << indent << "  upper_left[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.upper_left[i]);
    }
    s << indent << "lower_right[]" << std::endl;
    for (size_t i = 0; i < v.lower_right.size(); ++i)
    {
      s << indent << "  lower_right[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lower_right[i]);
    }
    s << indent << "upper_left_tmp[]" << std::endl;
    for (size_t i = 0; i < v.upper_left_tmp.size(); ++i)
    {
      s << indent << "  upper_left_tmp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.upper_left_tmp[i]);
    }
    s << indent << "lower_right_tmp[]" << std::endl;
    for (size_t i = 0; i < v.lower_right_tmp.size(); ++i)
    {
      s << indent << "  lower_right_tmp[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.lower_right_tmp[i]);
    }
    s << indent << "alpha: ";
    Printer<double>::stream(s, indent + "  ", v.alpha);
    s << indent << "score: ";
    Printer<double>::stream(s, indent + "  ", v.score);
    s << indent << "truncated_horizontal: ";
    Printer<double>::stream(s, indent + "  ", v.truncated_horizontal);
    s << indent << "truncated_vertical: ";
    Printer<double>::stream(s, indent + "  ", v.truncated_vertical);
    s << indent << "direction[]" << std::endl;
    for (size_t i = 0; i < v.direction.size(); ++i)
    {
      s << indent << "  direction[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.direction[i]);
    }
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.center[i]);
    }
    s << indent << "position_uncertainty[]" << std::endl;
    for (size_t i = 0; i < v.position_uncertainty.size(); ++i)
    {
      s << indent << "  position_uncertainty[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_uncertainty[i]);
    }
    s << indent << "velocity_uncertainty[]" << std::endl;
    for (size_t i = 0; i < v.velocity_uncertainty.size(); ++i)
    {
      s << indent << "  velocity_uncertainty[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity_uncertainty[i]);
    }
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "distance_status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.distance_status);
    s << indent << "azimuth: ";
    Printer<double>::stream(s, indent + "  ", v.azimuth);
    s << indent << "track_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.track_id);
    s << indent << "track_score: ";
    Printer<double>::stream(s, indent + "  ", v.track_score);
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "tracking_time: ";
    Printer<double>::stream(s, indent + "  ", v.tracking_time);
    s << indent << "latest_tracked_time: ";
    Printer<double>::stream(s, indent + "  ", v.latest_tracked_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_VISUAL_OBJECT_INFO_H
