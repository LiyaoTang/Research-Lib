// Generated by gencpp from file perception_msgs/localization_info.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_LOCALIZATION_INFO_H
#define PERCEPTION_MSGS_MESSAGE_LOCALIZATION_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <perception_msgs/road_info.h>
#include <perception_msgs/guide_point.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct localization_info_
{
  typedef localization_info_<ContainerAllocator> Type;

  localization_info_()
    : header()
    , timestamp(0.0)
    , time_ms(0)
    , time_us(0)
    , time_ns(0)
    , sys_time_us(0)
    , time_s_recall_dt(0.0)
    , lon(0.0)
    , lat(0.0)
    , heading_absolute(0.0)
    , heading_relative(0.0)
    , heading_had(0.0)
    , pos(0)
    , is_updated(0)
    , initialized(0)
    , level(0)
    , quality(0.0)
    , section_id(0)
    , lane_id(0)
    , vehicle_speed(0.0)
    , road_info()
    , odom_longitude(0.0)
    , odom_latitude(0.0)
    , odom_yaw_rad(0.0)
    , display()
    , guide_point()  {
    }
  localization_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timestamp(0.0)
    , time_ms(0)
    , time_us(0)
    , time_ns(0)
    , sys_time_us(0)
    , time_s_recall_dt(0.0)
    , lon(0.0)
    , lat(0.0)
    , heading_absolute(0.0)
    , heading_relative(0.0)
    , heading_had(0.0)
    , pos(0)
    , is_updated(0)
    , initialized(0)
    , level(0)
    , quality(0.0)
    , section_id(0)
    , lane_id(0)
    , vehicle_speed(0.0)
    , road_info(_alloc)
    , odom_longitude(0.0)
    , odom_latitude(0.0)
    , odom_yaw_rad(0.0)
    , display(_alloc)
    , guide_point(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _timestamp_type;
  _timestamp_type timestamp;

   typedef uint64_t _time_ms_type;
  _time_ms_type time_ms;

   typedef uint64_t _time_us_type;
  _time_us_type time_us;

   typedef uint64_t _time_ns_type;
  _time_ns_type time_ns;

   typedef uint64_t _sys_time_us_type;
  _sys_time_us_type sys_time_us;

   typedef double _time_s_recall_dt_type;
  _time_s_recall_dt_type time_s_recall_dt;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _lat_type;
  _lat_type lat;

   typedef float _heading_absolute_type;
  _heading_absolute_type heading_absolute;

   typedef float _heading_relative_type;
  _heading_relative_type heading_relative;

   typedef float _heading_had_type;
  _heading_had_type heading_had;

   typedef int16_t _pos_type;
  _pos_type pos;

   typedef int32_t _is_updated_type;
  _is_updated_type is_updated;

   typedef int32_t _initialized_type;
  _initialized_type initialized;

   typedef int32_t _level_type;
  _level_type level;

   typedef double _quality_type;
  _quality_type quality;

   typedef int64_t _section_id_type;
  _section_id_type section_id;

   typedef int64_t _lane_id_type;
  _lane_id_type lane_id;

   typedef double _vehicle_speed_type;
  _vehicle_speed_type vehicle_speed;

   typedef  ::perception_msgs::road_info_<ContainerAllocator>  _road_info_type;
  _road_info_type road_info;

   typedef double _odom_longitude_type;
  _odom_longitude_type odom_longitude;

   typedef double _odom_latitude_type;
  _odom_latitude_type odom_latitude;

   typedef double _odom_yaw_rad_type;
  _odom_yaw_rad_type odom_yaw_rad;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _display_type;
  _display_type display;

   typedef  ::perception_msgs::guide_point_<ContainerAllocator>  _guide_point_type;
  _guide_point_type guide_point;





  typedef boost::shared_ptr< ::perception_msgs::localization_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::localization_info_<ContainerAllocator> const> ConstPtr;

}; // struct localization_info_

typedef ::perception_msgs::localization_info_<std::allocator<void> > localization_info;

typedef boost::shared_ptr< ::perception_msgs::localization_info > localization_infoPtr;
typedef boost::shared_ptr< ::perception_msgs::localization_info const> localization_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::localization_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::localization_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::localization_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::localization_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::localization_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::localization_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::localization_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::localization_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::localization_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e90d7bb61384b8a2761f000b2604888";
  }

  static const char* value(const ::perception_msgs::localization_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e90d7bb61384b8aULL;
  static const uint64_t static_value2 = 0x2761f000b2604888ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::localization_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/localization_info";
  }

  static const char* value(const ::perception_msgs::localization_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::localization_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
float32 timestamp\n\
uint64 time_ms\n\
uint64 time_us\n\
uint64 time_ns\n\
uint64 sys_time_us\n\
float64 time_s_recall_dt   # delta time recall_time - called_time in second(s)\n\
float64 lon\n\
float64 lat\n\
float32 heading_absolute\n\
float32 heading_relative\n\
float32 heading_had\n\
int16 pos\n\
int32 is_updated\n\
int32 initialized\n\
# 0：　质量好\n\
# 1: \n\
# 2:\n\
# 3:??\n\
int32 level \n\
float64 quality\n\
\n\
int64 section_id\n\
int64 lane_id\n\
\n\
# vehicle_speed\n\
float64 vehicle_speed\n\
\n\
perception_msgs/road_info road_info\n\
\n\
# odom_lon\n\
float64 odom_longitude\n\
float64 odom_latitude\n\
float64 odom_yaw_rad\n\
\n\
# just for display curve\n\
float64[] display\n\
\n\
# guide_point\n\
perception_msgs/guide_point guide_point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: perception_msgs/road_info\n\
Header header\n\
uint64 sys_time_us              #/*用于各传感器消息时间同步的时间戳*/\n\
lane_info[] vlanes              #/*存储车道信息*/\n\
lane_mark_info[] vlane_marks    #/*存储车道线信息*/\n\
float64 lane_departure_angle     #/*!< 道路与车身坐标系的夹角(弧度单位[-PI,PI]) */\n\
float64 lane_departure_distance  # /*!< 自车与车道中心线的距离 */\n\
================================================================================\n\
MSG: perception_msgs/lane_info\n\
Header header\n\
uint32[] vleft_mark_index\n\
uint32[] vright_mark_index\n\
float64[] speed_limit\n\
int32 lane_id                # /*< 车道线编号 当前车道是0，从左至右： - 2, -1, 0， 1, 2 */\n\
int32 lane_hd_id             # 高精地图对应的车道id \n\
\n\
================================================================================\n\
MSG: perception_msgs/lane_mark_info\n\
Header header\n\
uint8 mark_type      #/*!< 类型 LaneMarkingType*/\n\
uint8 mark_color     #/*!< 类型 LaneMarkingColor */\n\
float64 a\n\
float64 b\n\
float64 c\n\
float64 d            # /* y = a * pow(x,3) + b * pow(x,2) + c * x + d */\n\
float64 x_start      # /*!< 纵向起始点(米) */\n\
float64 x_end        # /*!< 纵向终止点(米) */\n\
\n\
float64 image_a\n\
float64 image_b\n\
float64 image_c\n\
float64 image_d\n\
float64 image_x_start\n\
float64 image_x_end\n\
\n\
================================================================================\n\
MSG: perception_msgs/guide_point\n\
# GuidancePointType type;\n\
# double distance;\n\
# int lane_id;\n\
# int section_id;\n\
# GPSCoord gps_coord;\n\
\n\
int64 guide_point_type\n\
float64 distance\n\
int64 lane_id\n\
int64 section_id\n\
float64 gps_longitude\n\
float64 gps_latitude\n\
";
  }

  static const char* value(const ::perception_msgs::localization_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::localization_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timestamp);
      stream.next(m.time_ms);
      stream.next(m.time_us);
      stream.next(m.time_ns);
      stream.next(m.sys_time_us);
      stream.next(m.time_s_recall_dt);
      stream.next(m.lon);
      stream.next(m.lat);
      stream.next(m.heading_absolute);
      stream.next(m.heading_relative);
      stream.next(m.heading_had);
      stream.next(m.pos);
      stream.next(m.is_updated);
      stream.next(m.initialized);
      stream.next(m.level);
      stream.next(m.quality);
      stream.next(m.section_id);
      stream.next(m.lane_id);
      stream.next(m.vehicle_speed);
      stream.next(m.road_info);
      stream.next(m.odom_longitude);
      stream.next(m.odom_latitude);
      stream.next(m.odom_yaw_rad);
      stream.next(m.display);
      stream.next(m.guide_point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct localization_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::localization_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::localization_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timestamp: ";
    Printer<float>::stream(s, indent + "  ", v.timestamp);
    s << indent << "time_ms: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_ms);
    s << indent << "time_us: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_us);
    s << indent << "time_ns: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_ns);
    s << indent << "sys_time_us: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.sys_time_us);
    s << indent << "time_s_recall_dt: ";
    Printer<double>::stream(s, indent + "  ", v.time_s_recall_dt);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "heading_absolute: ";
    Printer<float>::stream(s, indent + "  ", v.heading_absolute);
    s << indent << "heading_relative: ";
    Printer<float>::stream(s, indent + "  ", v.heading_relative);
    s << indent << "heading_had: ";
    Printer<float>::stream(s, indent + "  ", v.heading_had);
    s << indent << "pos: ";
    Printer<int16_t>::stream(s, indent + "  ", v.pos);
    s << indent << "is_updated: ";
    Printer<int32_t>::stream(s, indent + "  ", v.is_updated);
    s << indent << "initialized: ";
    Printer<int32_t>::stream(s, indent + "  ", v.initialized);
    s << indent << "level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.level);
    s << indent << "quality: ";
    Printer<double>::stream(s, indent + "  ", v.quality);
    s << indent << "section_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.section_id);
    s << indent << "lane_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "vehicle_speed: ";
    Printer<double>::stream(s, indent + "  ", v.vehicle_speed);
    s << indent << "road_info: ";
    s << std::endl;
    Printer< ::perception_msgs::road_info_<ContainerAllocator> >::stream(s, indent + "  ", v.road_info);
    s << indent << "odom_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.odom_longitude);
    s << indent << "odom_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.odom_latitude);
    s << indent << "odom_yaw_rad: ";
    Printer<double>::stream(s, indent + "  ", v.odom_yaw_rad);
    s << indent << "display[]" << std::endl;
    for (size_t i = 0; i < v.display.size(); ++i)
    {
      s << indent << "  display[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.display[i]);
    }
    s << indent << "guide_point: ";
    s << std::endl;
    Printer< ::perception_msgs::guide_point_<ContainerAllocator> >::stream(s, indent + "  ", v.guide_point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_LOCALIZATION_INFO_H
