// Generated by gencpp from file perception_msgs/objects.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_OBJECTS_H
#define PERCEPTION_MSGS_MESSAGE_OBJECTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <perception_msgs/object_info.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct objects_
{
  typedef objects_<ContainerAllocator> Type;

  objects_()
    : header()
    , sys_time_us(0)
    , objects()  {
    }
  objects_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sys_time_us(0)
    , objects(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _sys_time_us_type;
  _sys_time_us_type sys_time_us;

   typedef std::vector< ::perception_msgs::object_info_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::perception_msgs::object_info_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;





  typedef boost::shared_ptr< ::perception_msgs::objects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::objects_<ContainerAllocator> const> ConstPtr;

}; // struct objects_

typedef ::perception_msgs::objects_<std::allocator<void> > objects;

typedef boost::shared_ptr< ::perception_msgs::objects > objectsPtr;
typedef boost::shared_ptr< ::perception_msgs::objects const> objectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::objects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::objects_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::objects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::objects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::objects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::objects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::objects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::objects_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9359e9ace760a676ea7a2b56b46330c7";
  }

  static const char* value(const ::perception_msgs::objects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9359e9ace760a676ULL;
  static const uint64_t static_value2 = 0xea7a2b56b46330c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/objects";
  }

  static const char* value(const ::perception_msgs::objects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint64 sys_time_us              #/*用于各传感器消息时间同步的时间戳*/\n\
object_info[] objects\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: perception_msgs/object_info\n\
Header header\n\
int32 obj_id            #/*!< 目标编号 */\n\
uint8 type              #/*!< 类型: perception ObjectType */\n\
\n\
float64 x_v             #/*!< 纵向距离(米) */\n\
float64 heading_c       #/*!< 中心点heading角(弧度单位) */\n\
float64 heading_l       #/*!< 左侧端点heading角, 相机(弧度单位) */\n\
float64 heading_r       #/*!< 右侧端点heading角, 相机(弧度单位) */\n\
float64 heading_speed   #/*!< 运行的速度方向(弧度单位) */\n\
float64 speed           #/*!< 速度, 雷达(米/秒) */\n\
\n\
int32 sensor_type		#/* !< 0: camera; 1: radar; 2: fused */\n\
\n\
##/*! 注意：当只有雷达检测出来的时候都设置为100米，宽度为-100米*/\n\
float64 height          #/* !< object 高度(米) */\n\
float64 width           #/* !< object 宽度(米) */\n\
float64 length          #/* !< object 长度(米) */\n\
bool is_top_surface     #/* !< 是否为车辆的上表面，相对x轴方向 */\n\
\n\
int32 image_x   \n\
int32 image_y\n\
int32 image_w\n\
int32 image_h\n\
\n\
float64 prob            #/* !< object 置信度0-1 */\n\
";
  }

  static const char* value(const ::perception_msgs::objects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::objects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sys_time_us);
      stream.next(m.objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct objects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::objects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::objects_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sys_time_us: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.sys_time_us);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_msgs::object_info_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_OBJECTS_H
