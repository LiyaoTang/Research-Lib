// Generated by gencpp from file perception_msgs/radar_target.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_RADAR_TARGET_H
#define PERCEPTION_MSGS_MESSAGE_RADAR_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <perception_msgs/coord3d.h>
#include <perception_msgs/coord3d.h>
#include <perception_msgs/coord3d.h>
#include <perception_msgs/coord3d.h>
#include <perception_msgs/coord3d.h>
#include <perception_msgs/coord3d.h>
#include <perception_msgs/coord3d.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct radar_target_
{
  typedef radar_target_<ContainerAllocator> Type;

  radar_target_()
    : header()
    , timestamp(0)
    , group_id(0)
    , radar_type(0)
    , target_id(0)
    , track_status(0)
    , moving_status(0)
    , obj_type(0)
    , coordinate()
    , velocity()
    , is_radial_velocity(false)
    , acceleration()
    , coordinate_rms()
    , velocity_rms()
    , acceleration_rms()
    , size_of_box()
    , rcs(0.0)
    , orientation_angle(0.0)
    , orientation_angle_rms(0.0)
    , prob_of_exist(0.0)
    , prob_of_objtype(0.0)
    , lifetime(0.0)
    , is_acceleration_valid(false)
    , is_coordinate_rms_valid(false)
    , is_velocity_rms_valid(false)
    , is_acceleration_rms_valid(false)
    , is_orientation_angle_valid(false)
    , is_orientation_angle_rms_valid(false)  {
    }
  radar_target_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , timestamp(0)
    , group_id(0)
    , radar_type(0)
    , target_id(0)
    , track_status(0)
    , moving_status(0)
    , obj_type(0)
    , coordinate(_alloc)
    , velocity(_alloc)
    , is_radial_velocity(false)
    , acceleration(_alloc)
    , coordinate_rms(_alloc)
    , velocity_rms(_alloc)
    , acceleration_rms(_alloc)
    , size_of_box(_alloc)
    , rcs(0.0)
    , orientation_angle(0.0)
    , orientation_angle_rms(0.0)
    , prob_of_exist(0.0)
    , prob_of_objtype(0.0)
    , lifetime(0.0)
    , is_acceleration_valid(false)
    , is_coordinate_rms_valid(false)
    , is_velocity_rms_valid(false)
    , is_acceleration_rms_valid(false)
    , is_orientation_angle_valid(false)
    , is_orientation_angle_rms_valid(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _timestamp_type;
  _timestamp_type timestamp;

   typedef uint32_t _group_id_type;
  _group_id_type group_id;

   typedef uint32_t _radar_type_type;
  _radar_type_type radar_type;

   typedef uint32_t _target_id_type;
  _target_id_type target_id;

   typedef uint32_t _track_status_type;
  _track_status_type track_status;

   typedef uint32_t _moving_status_type;
  _moving_status_type moving_status;

   typedef uint32_t _obj_type_type;
  _obj_type_type obj_type;

   typedef  ::perception_msgs::coord3d_<ContainerAllocator>  _coordinate_type;
  _coordinate_type coordinate;

   typedef  ::perception_msgs::coord3d_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef uint8_t _is_radial_velocity_type;
  _is_radial_velocity_type is_radial_velocity;

   typedef  ::perception_msgs::coord3d_<ContainerAllocator>  _acceleration_type;
  _acceleration_type acceleration;

   typedef  ::perception_msgs::coord3d_<ContainerAllocator>  _coordinate_rms_type;
  _coordinate_rms_type coordinate_rms;

   typedef  ::perception_msgs::coord3d_<ContainerAllocator>  _velocity_rms_type;
  _velocity_rms_type velocity_rms;

   typedef  ::perception_msgs::coord3d_<ContainerAllocator>  _acceleration_rms_type;
  _acceleration_rms_type acceleration_rms;

   typedef  ::perception_msgs::coord3d_<ContainerAllocator>  _size_of_box_type;
  _size_of_box_type size_of_box;

   typedef double _rcs_type;
  _rcs_type rcs;

   typedef double _orientation_angle_type;
  _orientation_angle_type orientation_angle;

   typedef double _orientation_angle_rms_type;
  _orientation_angle_rms_type orientation_angle_rms;

   typedef double _prob_of_exist_type;
  _prob_of_exist_type prob_of_exist;

   typedef double _prob_of_objtype_type;
  _prob_of_objtype_type prob_of_objtype;

   typedef double _lifetime_type;
  _lifetime_type lifetime;

   typedef uint8_t _is_acceleration_valid_type;
  _is_acceleration_valid_type is_acceleration_valid;

   typedef uint8_t _is_coordinate_rms_valid_type;
  _is_coordinate_rms_valid_type is_coordinate_rms_valid;

   typedef uint8_t _is_velocity_rms_valid_type;
  _is_velocity_rms_valid_type is_velocity_rms_valid;

   typedef uint8_t _is_acceleration_rms_valid_type;
  _is_acceleration_rms_valid_type is_acceleration_rms_valid;

   typedef uint8_t _is_orientation_angle_valid_type;
  _is_orientation_angle_valid_type is_orientation_angle_valid;

   typedef uint8_t _is_orientation_angle_rms_valid_type;
  _is_orientation_angle_rms_valid_type is_orientation_angle_rms_valid;





  typedef boost::shared_ptr< ::perception_msgs::radar_target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::radar_target_<ContainerAllocator> const> ConstPtr;

}; // struct radar_target_

typedef ::perception_msgs::radar_target_<std::allocator<void> > radar_target;

typedef boost::shared_ptr< ::perception_msgs::radar_target > radar_targetPtr;
typedef boost::shared_ptr< ::perception_msgs::radar_target const> radar_targetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::radar_target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::radar_target_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::radar_target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::radar_target_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::radar_target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::radar_target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::radar_target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::radar_target_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::radar_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0703d4a58bb726f408e6e681f9dc7b5f";
  }

  static const char* value(const ::perception_msgs::radar_target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0703d4a58bb726f4ULL;
  static const uint64_t static_value2 = 0x08e6e681f9dc7b5fULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::radar_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/radar_target";
  }

  static const char* value(const ::perception_msgs::radar_target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::radar_target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint64 timestamp  # unit: us\n\
uint32 group_id  # radar id (front: 0  left front: 1  right front:2\n\
 # back: 3  left back: 4  right back: 5)\n\
uint32 radar_type # detail radar version\n\
 # DELPHI_ESR = 0, DELPHI_RSDS = 1,\n\
 # CONTI_408 = 2, CONTI_208 = 3,\n\
 # append if more types will be supported\n\
 # unknown = other values\n\
uint32 target_id  # target id given by radar itself\n\
uint32 track_status  # target status (need to merge with conti408 obj_MeasState)\n\
 # 0x0:No_Target\n\
 # 0x1:New_Target\n\
 # 0x2:New_Updated_Target\n\
 # 0x3:Updated_Target\n\
 # 0x4:Coasted_Target\n\
 # 0x5:Merged_Target\n\
 # 0x6:Invalid_Coasted_Target\n\
 # 0x7:New_Coasted_Target\n\
uint32 moving_status  # 0x0: moving\n\
 # 0x1: stationary\n\
 # 0x2: oncoming\n\
 # 0x3: stationary candidate\n\
 # 0x4: unknown\n\
 # 0x5: crossing stationary\n\
 # 0x6: crossing moving\n\
 # 0x7: stopped\n\
uint32 obj_type  # 0x0: point\n\
 # 0x1: car\n\
 # 0x2: truck\n\
 # 0x3: pedestrian\n\
 # 0x4: motorcycle\n\
 # 0x5: bicycle\n\
 # 0x6: wide\n\
 # 0x7: reserved\n\
 # 0x8: bridge\n\
 # 0x9: curb\n\
coord3d coordinate  # relative position (unit: m  up, front, left is positive)\n\
coord3d velocity  # relative velocity(unit: m/s  awaying is positive)\n\
bool is_radial_velocity  # set true if it's radial velocity\n\
coord3d acceleration  # relative acceleration (unit: m/s^2  awaying is positive)\n\
coord3d coordinate_rms  # standard deviation of position(unit: m)\n\
coord3d velocity_rms  # standard deviation of velocity(unit: m/s)\n\
coord3d acceleration_rms  # standard deviation of acceleration(unit: m/s^2)\n\
coord3d size_of_box  # length, width, height (unit: m) default: -1\n\
float64 rcs  # Radar Cross Section(unit: dBm^2)\n\
float64 orientation_angle  # Orientation angle(unit: rad)\n\
float64 orientation_angle_rms  # standard deviation of orientation angle(unit: rad)\n\
float64 prob_of_exist  # probability of existence(use upper limit)  default: -1\n\
float64 prob_of_objtype  #probability of object type.\n\
float64 lifetime  # the current lifetime of track(unit: s)  default: -1\n\
bool is_acceleration_valid # set true if acceleration is valid\n\
bool is_coordinate_rms_valid # set true if valid\n\
bool is_velocity_rms_valid # set true if valid\n\
bool is_acceleration_rms_valid # set true if valid\n\
bool is_orientation_angle_valid # set true if valid\n\
bool is_orientation_angle_rms_valid # set true if valid\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: perception_msgs/coord3d\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::perception_msgs::radar_target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::radar_target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.timestamp);
      stream.next(m.group_id);
      stream.next(m.radar_type);
      stream.next(m.target_id);
      stream.next(m.track_status);
      stream.next(m.moving_status);
      stream.next(m.obj_type);
      stream.next(m.coordinate);
      stream.next(m.velocity);
      stream.next(m.is_radial_velocity);
      stream.next(m.acceleration);
      stream.next(m.coordinate_rms);
      stream.next(m.velocity_rms);
      stream.next(m.acceleration_rms);
      stream.next(m.size_of_box);
      stream.next(m.rcs);
      stream.next(m.orientation_angle);
      stream.next(m.orientation_angle_rms);
      stream.next(m.prob_of_exist);
      stream.next(m.prob_of_objtype);
      stream.next(m.lifetime);
      stream.next(m.is_acceleration_valid);
      stream.next(m.is_coordinate_rms_valid);
      stream.next(m.is_velocity_rms_valid);
      stream.next(m.is_acceleration_rms_valid);
      stream.next(m.is_orientation_angle_valid);
      stream.next(m.is_orientation_angle_rms_valid);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct radar_target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::radar_target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::radar_target_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "group_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.group_id);
    s << indent << "radar_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.radar_type);
    s << indent << "target_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.target_id);
    s << indent << "track_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.track_status);
    s << indent << "moving_status: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.moving_status);
    s << indent << "obj_type: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.obj_type);
    s << indent << "coordinate: ";
    s << std::endl;
    Printer< ::perception_msgs::coord3d_<ContainerAllocator> >::stream(s, indent + "  ", v.coordinate);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::perception_msgs::coord3d_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "is_radial_velocity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_radial_velocity);
    s << indent << "acceleration: ";
    s << std::endl;
    Printer< ::perception_msgs::coord3d_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration);
    s << indent << "coordinate_rms: ";
    s << std::endl;
    Printer< ::perception_msgs::coord3d_<ContainerAllocator> >::stream(s, indent + "  ", v.coordinate_rms);
    s << indent << "velocity_rms: ";
    s << std::endl;
    Printer< ::perception_msgs::coord3d_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity_rms);
    s << indent << "acceleration_rms: ";
    s << std::endl;
    Printer< ::perception_msgs::coord3d_<ContainerAllocator> >::stream(s, indent + "  ", v.acceleration_rms);
    s << indent << "size_of_box: ";
    s << std::endl;
    Printer< ::perception_msgs::coord3d_<ContainerAllocator> >::stream(s, indent + "  ", v.size_of_box);
    s << indent << "rcs: ";
    Printer<double>::stream(s, indent + "  ", v.rcs);
    s << indent << "orientation_angle: ";
    Printer<double>::stream(s, indent + "  ", v.orientation_angle);
    s << indent << "orientation_angle_rms: ";
    Printer<double>::stream(s, indent + "  ", v.orientation_angle_rms);
    s << indent << "prob_of_exist: ";
    Printer<double>::stream(s, indent + "  ", v.prob_of_exist);
    s << indent << "prob_of_objtype: ";
    Printer<double>::stream(s, indent + "  ", v.prob_of_objtype);
    s << indent << "lifetime: ";
    Printer<double>::stream(s, indent + "  ", v.lifetime);
    s << indent << "is_acceleration_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_acceleration_valid);
    s << indent << "is_coordinate_rms_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_coordinate_rms_valid);
    s << indent << "is_velocity_rms_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_velocity_rms_valid);
    s << indent << "is_acceleration_rms_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_acceleration_rms_valid);
    s << indent << "is_orientation_angle_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_orientation_angle_valid);
    s << indent << "is_orientation_angle_rms_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_orientation_angle_rms_valid);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_RADAR_TARGET_H
