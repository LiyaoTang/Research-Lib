// Generated by gencpp from file perception_msgs/locResponse.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_LOCRESPONSE_H
#define PERCEPTION_MSGS_MESSAGE_LOCRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_msgs/localization_info.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct locResponse_
{
  typedef locResponse_<ContainerAllocator> Type;

  locResponse_()
    : sum(0)
    , loc()  {
    }
  locResponse_(const ContainerAllocator& _alloc)
    : sum(0)
    , loc(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _sum_type;
  _sum_type sum;

   typedef  ::perception_msgs::localization_info_<ContainerAllocator>  _loc_type;
  _loc_type loc;





  typedef boost::shared_ptr< ::perception_msgs::locResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::locResponse_<ContainerAllocator> const> ConstPtr;

}; // struct locResponse_

typedef ::perception_msgs::locResponse_<std::allocator<void> > locResponse;

typedef boost::shared_ptr< ::perception_msgs::locResponse > locResponsePtr;
typedef boost::shared_ptr< ::perception_msgs::locResponse const> locResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::locResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::locResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::locResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::locResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::locResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::locResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::locResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::locResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::locResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50713e9def50cac6018edb25f92acd69";
  }

  static const char* value(const ::perception_msgs::locResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50713e9def50cac6ULL;
  static const uint64_t static_value2 = 0x018edb25f92acd69ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::locResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/locResponse";
  }

  static const char* value(const ::perception_msgs::locResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::locResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 sum\n\
perception_msgs/localization_info loc\n\
\n\
\n\
================================================================================\n\
MSG: perception_msgs/localization_info\n\
Header header\n\
float32 timestamp\n\
uint64 time_ms\n\
uint64 time_us\n\
uint64 time_ns\n\
uint64 sys_time_us\n\
float64 time_s_recall_dt   # delta time recall_time - called_time in second(s)\n\
float64 lon\n\
float64 lat\n\
float32 heading_absolute\n\
float32 heading_relative\n\
float32 heading_had\n\
int16 pos\n\
int32 is_updated\n\
int32 initialized\n\
# 0：　质量好\n\
# 1: \n\
# 2:\n\
# 3:??\n\
int32 level \n\
float64 quality\n\
\n\
int64 section_id\n\
int64 lane_id\n\
\n\
# vehicle_speed\n\
float64 vehicle_speed\n\
\n\
perception_msgs/road_info road_info\n\
\n\
# odom_lon\n\
float64 odom_longitude\n\
float64 odom_latitude\n\
float64 odom_yaw_rad\n\
\n\
# just for display curve\n\
float64[] display\n\
\n\
# guide_point\n\
perception_msgs/guide_point guide_point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: perception_msgs/road_info\n\
Header header\n\
uint64 sys_time_us              #/*用于各传感器消息时间同步的时间戳*/\n\
lane_info[] vlanes              #/*存储车道信息*/\n\
lane_mark_info[] vlane_marks    #/*存储车道线信息*/\n\
float64 lane_departure_angle     #/*!< 道路与车身坐标系的夹角(弧度单位[-PI,PI]) */\n\
float64 lane_departure_distance  # /*!< 自车与车道中心线的距离 */\n\
================================================================================\n\
MSG: perception_msgs/lane_info\n\
Header header\n\
uint32[] vleft_mark_index\n\
uint32[] vright_mark_index\n\
float64[] speed_limit\n\
int32 lane_id                # /*< 车道线编号 当前车道是0，从左至右： - 2, -1, 0， 1, 2 */\n\
int32 lane_hd_id             # 高精地图对应的车道id \n\
\n\
================================================================================\n\
MSG: perception_msgs/lane_mark_info\n\
Header header\n\
uint8 mark_type      #/*!< 类型 LaneMarkingType*/\n\
uint8 mark_color     #/*!< 类型 LaneMarkingColor */\n\
float64 a\n\
float64 b\n\
float64 c\n\
float64 d            # /* y = a * pow(x,3) + b * pow(x,2) + c * x + d */\n\
float64 x_start      # /*!< 纵向起始点(米) */\n\
float64 x_end        # /*!< 纵向终止点(米) */\n\
\n\
float64 image_a\n\
float64 image_b\n\
float64 image_c\n\
float64 image_d\n\
float64 image_x_start\n\
float64 image_x_end\n\
\n\
================================================================================\n\
MSG: perception_msgs/guide_point\n\
# GuidancePointType type;\n\
# double distance;\n\
# int lane_id;\n\
# int section_id;\n\
# GPSCoord gps_coord;\n\
\n\
int64 guide_point_type\n\
float64 distance\n\
int64 lane_id\n\
int64 section_id\n\
float64 gps_longitude\n\
float64 gps_latitude\n\
";
  }

  static const char* value(const ::perception_msgs::locResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::locResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sum);
      stream.next(m.loc);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct locResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::locResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::locResponse_<ContainerAllocator>& v)
  {
    s << indent << "sum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.sum);
    s << indent << "loc: ";
    s << std::endl;
    Printer< ::perception_msgs::localization_info_<ContainerAllocator> >::stream(s, indent + "  ", v.loc);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_LOCRESPONSE_H
