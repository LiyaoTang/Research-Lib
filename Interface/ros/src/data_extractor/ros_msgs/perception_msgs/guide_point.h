// Generated by gencpp from file perception_msgs/guide_point.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_GUIDE_POINT_H
#define PERCEPTION_MSGS_MESSAGE_GUIDE_POINT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_msgs
{
template <class ContainerAllocator>
struct guide_point_
{
  typedef guide_point_<ContainerAllocator> Type;

  guide_point_()
    : guide_point_type(0)
    , distance(0.0)
    , lane_id(0)
    , section_id(0)
    , gps_longitude(0.0)
    , gps_latitude(0.0)  {
    }
  guide_point_(const ContainerAllocator& _alloc)
    : guide_point_type(0)
    , distance(0.0)
    , lane_id(0)
    , section_id(0)
    , gps_longitude(0.0)
    , gps_latitude(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _guide_point_type_type;
  _guide_point_type_type guide_point_type;

   typedef double _distance_type;
  _distance_type distance;

   typedef int64_t _lane_id_type;
  _lane_id_type lane_id;

   typedef int64_t _section_id_type;
  _section_id_type section_id;

   typedef double _gps_longitude_type;
  _gps_longitude_type gps_longitude;

   typedef double _gps_latitude_type;
  _gps_latitude_type gps_latitude;





  typedef boost::shared_ptr< ::perception_msgs::guide_point_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::guide_point_<ContainerAllocator> const> ConstPtr;

}; // struct guide_point_

typedef ::perception_msgs::guide_point_<std::allocator<void> > guide_point;

typedef boost::shared_ptr< ::perception_msgs::guide_point > guide_pointPtr;
typedef boost::shared_ptr< ::perception_msgs::guide_point const> guide_pointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::guide_point_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::guide_point_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::guide_point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::guide_point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::guide_point_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::guide_point_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::guide_point_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::guide_point_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::guide_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cef251a975162804d5be41cd2b22d227";
  }

  static const char* value(const ::perception_msgs::guide_point_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcef251a975162804ULL;
  static const uint64_t static_value2 = 0xd5be41cd2b22d227ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::guide_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/guide_point";
  }

  static const char* value(const ::perception_msgs::guide_point_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::guide_point_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# GuidancePointType type;\n\
# double distance;\n\
# int lane_id;\n\
# int section_id;\n\
# GPSCoord gps_coord;\n\
\n\
int64 guide_point_type\n\
float64 distance\n\
int64 lane_id\n\
int64 section_id\n\
float64 gps_longitude\n\
float64 gps_latitude\n\
";
  }

  static const char* value(const ::perception_msgs::guide_point_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::guide_point_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.guide_point_type);
      stream.next(m.distance);
      stream.next(m.lane_id);
      stream.next(m.section_id);
      stream.next(m.gps_longitude);
      stream.next(m.gps_latitude);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct guide_point_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::guide_point_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::guide_point_<ContainerAllocator>& v)
  {
    s << indent << "guide_point_type: ";
    Printer<int64_t>::stream(s, indent + "  ", v.guide_point_type);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "lane_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "section_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.section_id);
    s << indent << "gps_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.gps_longitude);
    s << indent << "gps_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.gps_latitude);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_GUIDE_POINT_H
