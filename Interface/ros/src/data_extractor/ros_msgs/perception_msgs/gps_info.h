// Generated by gencpp from file perception_msgs/gps_info.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_GPS_INFO_H
#define PERCEPTION_MSGS_MESSAGE_GPS_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct gps_info_
{
  typedef gps_info_<ContainerAllocator> Type;

  gps_info_()
    : header()
    , fix_type(0)
    , utc_time_us(0)
    , sys_time_us(0)
    , lon(0.0)
    , lat(0.0)
    , height(0.0)
    , height_msl(0.0)
    , vel_2d(0.0)
    , vel_n(0.0)
    , vel_e(0.0)
    , vel_d(0.0)
    , head_mot(0.0)
    , head_veh(0.0)
    , acc_ver(0.0)
    , acc_hor(0.0)
    , acc_speed(0.0)
    , acc_head(0.0)  {
    }
  gps_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , fix_type(0)
    , utc_time_us(0)
    , sys_time_us(0)
    , lon(0.0)
    , lat(0.0)
    , height(0.0)
    , height_msl(0.0)
    , vel_2d(0.0)
    , vel_n(0.0)
    , vel_e(0.0)
    , vel_d(0.0)
    , head_mot(0.0)
    , head_veh(0.0)
    , acc_ver(0.0)
    , acc_hor(0.0)
    , acc_speed(0.0)
    , acc_head(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _fix_type_type;
  _fix_type_type fix_type;

   typedef uint64_t _utc_time_us_type;
  _utc_time_us_type utc_time_us;

   typedef uint64_t _sys_time_us_type;
  _sys_time_us_type sys_time_us;

   typedef double _lon_type;
  _lon_type lon;

   typedef double _lat_type;
  _lat_type lat;

   typedef double _height_type;
  _height_type height;

   typedef double _height_msl_type;
  _height_msl_type height_msl;

   typedef double _vel_2d_type;
  _vel_2d_type vel_2d;

   typedef double _vel_n_type;
  _vel_n_type vel_n;

   typedef double _vel_e_type;
  _vel_e_type vel_e;

   typedef double _vel_d_type;
  _vel_d_type vel_d;

   typedef double _head_mot_type;
  _head_mot_type head_mot;

   typedef double _head_veh_type;
  _head_veh_type head_veh;

   typedef double _acc_ver_type;
  _acc_ver_type acc_ver;

   typedef double _acc_hor_type;
  _acc_hor_type acc_hor;

   typedef double _acc_speed_type;
  _acc_speed_type acc_speed;

   typedef double _acc_head_type;
  _acc_head_type acc_head;





  typedef boost::shared_ptr< ::perception_msgs::gps_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::gps_info_<ContainerAllocator> const> ConstPtr;

}; // struct gps_info_

typedef ::perception_msgs::gps_info_<std::allocator<void> > gps_info;

typedef boost::shared_ptr< ::perception_msgs::gps_info > gps_infoPtr;
typedef boost::shared_ptr< ::perception_msgs::gps_info const> gps_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::gps_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::gps_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::gps_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::gps_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::gps_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::gps_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::gps_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::gps_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::gps_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea9bc8d8869949301dcca614bb69246c";
  }

  static const char* value(const ::perception_msgs::gps_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea9bc8d886994930ULL;
  static const uint64_t static_value2 = 0x1dcca614bb69246cULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::gps_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/gps_info";
  }

  static const char* value(const ::perception_msgs::gps_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::gps_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# @file gps_info.msg\n\
\n\
#如果浮点数据字段无效表示为NaN\n\
Header header\n\
uint64  fix_type        # gps固定类型 0: no fix, 1: dead reckoning only, 2: 2D-fix, 3: 3D-fix, 4: GNSS + dead reckoning combined, 5: time only fix\n\
uint64  utc_time_us     # UTC时间  (单位 us)\n\
uint64  sys_time_us     # 系统时间 (单位 us)\n\
float64 lon             # 经度 (单位 deg)\n\
float64 lat             # 纬度 (单位 deg)\n\
float64 height          # 高层 Height above ellipsoid      (单位 m)\n\
float64 height_msl      # 高层 Height above mean sea level (单位 m)\n\
float64 vel_2d          # 地面2D速度  (单位 m/s)\n\
float64 vel_n           # ned速度n分量(单位 m/s)\n\
float64 vel_e           # ned速度e分量(单位 m/s)\n\
float64 vel_d           # ned速度d分量(单位 m/s)\n\
float64 head_mot        # 方向 Heading of motion (2-D)  (单位 rad (-pi, pi])\n\
float64 head_veh        # 方向 Heading of vehicle (2-D) (单位 rad (-pi, pi])\n\
float64 acc_ver         # 水平定位精度 (单位 m)\n\
float64 acc_hor         # 垂直定位精度 (单位 m)\n\
float64 acc_speed       # 速度精度     (单位 m/s)\n\
float64 acc_head        # 方向精度 Heading accuracy estimate (both motion and vehicle) (单位 rad)\n\
\n\
#确定还需要那些字段 \n\
#字段有效性如何表示\n\
#确定字段的类型\n\
#字段的数据区间\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::perception_msgs::gps_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::gps_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.fix_type);
      stream.next(m.utc_time_us);
      stream.next(m.sys_time_us);
      stream.next(m.lon);
      stream.next(m.lat);
      stream.next(m.height);
      stream.next(m.height_msl);
      stream.next(m.vel_2d);
      stream.next(m.vel_n);
      stream.next(m.vel_e);
      stream.next(m.vel_d);
      stream.next(m.head_mot);
      stream.next(m.head_veh);
      stream.next(m.acc_ver);
      stream.next(m.acc_hor);
      stream.next(m.acc_speed);
      stream.next(m.acc_head);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gps_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::gps_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::gps_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "fix_type: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.fix_type);
    s << indent << "utc_time_us: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.utc_time_us);
    s << indent << "sys_time_us: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.sys_time_us);
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "height_msl: ";
    Printer<double>::stream(s, indent + "  ", v.height_msl);
    s << indent << "vel_2d: ";
    Printer<double>::stream(s, indent + "  ", v.vel_2d);
    s << indent << "vel_n: ";
    Printer<double>::stream(s, indent + "  ", v.vel_n);
    s << indent << "vel_e: ";
    Printer<double>::stream(s, indent + "  ", v.vel_e);
    s << indent << "vel_d: ";
    Printer<double>::stream(s, indent + "  ", v.vel_d);
    s << indent << "head_mot: ";
    Printer<double>::stream(s, indent + "  ", v.head_mot);
    s << indent << "head_veh: ";
    Printer<double>::stream(s, indent + "  ", v.head_veh);
    s << indent << "acc_ver: ";
    Printer<double>::stream(s, indent + "  ", v.acc_ver);
    s << indent << "acc_hor: ";
    Printer<double>::stream(s, indent + "  ", v.acc_hor);
    s << indent << "acc_speed: ";
    Printer<double>::stream(s, indent + "  ", v.acc_speed);
    s << indent << "acc_head: ";
    Printer<double>::stream(s, indent + "  ", v.acc_head);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_GPS_INFO_H
