// Generated by gencpp from file perception_msgs/CanMsgVehicle.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_CANMSGVEHICLE_H
#define PERCEPTION_MSGS_MESSAGE_CANMSGVEHICLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct CanMsgVehicle_
{
  typedef CanMsgVehicle_<ContainerAllocator> Type;

  CanMsgVehicle_()
    : header()
    , Vx(0.0)
    , Vx_update(0)
    , V_whl_FL(0.0)
    , V_whl_FL_update(0)
    , V_whl_FR(0.0)
    , V_whl_FR_update(0)
    , V_whl_RL(0.0)
    , V_whl_RL_update(0)
    , V_whl_RR(0.0)
    , V_whl_RR_update(0)
    , steerAngle(0.0)
    , steerAngle_update(0)
    , Ax(0.0)
    , Ax_update(0)
    , Ay(0.0)
    , Ay_update(0)
    , yawrate(0.0)
    , yawrate_update(0)  {
    }
  CanMsgVehicle_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Vx(0.0)
    , Vx_update(0)
    , V_whl_FL(0.0)
    , V_whl_FL_update(0)
    , V_whl_FR(0.0)
    , V_whl_FR_update(0)
    , V_whl_RL(0.0)
    , V_whl_RL_update(0)
    , V_whl_RR(0.0)
    , V_whl_RR_update(0)
    , steerAngle(0.0)
    , steerAngle_update(0)
    , Ax(0.0)
    , Ax_update(0)
    , Ay(0.0)
    , Ay_update(0)
    , yawrate(0.0)
    , yawrate_update(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _Vx_type;
  _Vx_type Vx;

   typedef int16_t _Vx_update_type;
  _Vx_update_type Vx_update;

   typedef double _V_whl_FL_type;
  _V_whl_FL_type V_whl_FL;

   typedef int16_t _V_whl_FL_update_type;
  _V_whl_FL_update_type V_whl_FL_update;

   typedef double _V_whl_FR_type;
  _V_whl_FR_type V_whl_FR;

   typedef int16_t _V_whl_FR_update_type;
  _V_whl_FR_update_type V_whl_FR_update;

   typedef double _V_whl_RL_type;
  _V_whl_RL_type V_whl_RL;

   typedef int16_t _V_whl_RL_update_type;
  _V_whl_RL_update_type V_whl_RL_update;

   typedef double _V_whl_RR_type;
  _V_whl_RR_type V_whl_RR;

   typedef int16_t _V_whl_RR_update_type;
  _V_whl_RR_update_type V_whl_RR_update;

   typedef double _steerAngle_type;
  _steerAngle_type steerAngle;

   typedef int16_t _steerAngle_update_type;
  _steerAngle_update_type steerAngle_update;

   typedef double _Ax_type;
  _Ax_type Ax;

   typedef int16_t _Ax_update_type;
  _Ax_update_type Ax_update;

   typedef double _Ay_type;
  _Ay_type Ay;

   typedef int16_t _Ay_update_type;
  _Ay_update_type Ay_update;

   typedef double _yawrate_type;
  _yawrate_type yawrate;

   typedef int16_t _yawrate_update_type;
  _yawrate_update_type yawrate_update;





  typedef boost::shared_ptr< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> const> ConstPtr;

}; // struct CanMsgVehicle_

typedef ::perception_msgs::CanMsgVehicle_<std::allocator<void> > CanMsgVehicle;

typedef boost::shared_ptr< ::perception_msgs::CanMsgVehicle > CanMsgVehiclePtr;
typedef boost::shared_ptr< ::perception_msgs::CanMsgVehicle const> CanMsgVehicleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::CanMsgVehicle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07074d38808f85de14c666d582b1f406";
  }

  static const char* value(const ::perception_msgs::CanMsgVehicle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07074d38808f85deULL;
  static const uint64_t static_value2 = 0x14c666d582b1f406ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/CanMsgVehicle";
  }

  static const char* value(const ::perception_msgs::CanMsgVehicle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# time information\n\
Header header\n\
\n\
# can message\n\
float64 Vx   #/*  Vehicle velocity,  单位m/s  */\n\
int16 Vx_update # /* 1:updated,   0: non-updated */\n\
float64 V_whl_FL # /*  左前轮轮速  单位m/s */\n\
int16 V_whl_FL_update # /* 1:updated,   0: non-updated */\n\
float64 V_whl_FR   # /*  右前轮轮速  单位m/s */\n\
int16 V_whl_FR_update # /* 1:updated,   0: non-updated */\n\
float64 V_whl_RL    # /*  左后轮轮速  单位m/s */\n\
int16 V_whl_RL_update # /* 1:updated,   0: non-updated */\n\
float64 V_whl_RR # /*  右后轮轮速  单位m/s */\n\
int16 V_whl_RR_update # /* 1:updated,   0: non-updated */\n\
\n\
float64 steerAngle   #/* 方向盘转角，单位deg */\n\
int16 steerAngle_update # /* 1:updated,   0: non-updated */\n\
\n\
float64 Ax              # /* 车身纵向加速度，单位m/s2 */\n\
int16 Ax_update        # /* 1:updated,   0: non-updated */\n\
float64 Ay             # /* 车身横向加速度，单位m/s2 */\n\
int16 Ay_update        # /* 1:updated,   0: non-updated */\n\
float64 yawrate        # /*车身航偏角速度，单位rad/s */\n\
int16 yawrate_update   # /* 1:updated,   0: non-updated */\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::perception_msgs::CanMsgVehicle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Vx);
      stream.next(m.Vx_update);
      stream.next(m.V_whl_FL);
      stream.next(m.V_whl_FL_update);
      stream.next(m.V_whl_FR);
      stream.next(m.V_whl_FR_update);
      stream.next(m.V_whl_RL);
      stream.next(m.V_whl_RL_update);
      stream.next(m.V_whl_RR);
      stream.next(m.V_whl_RR_update);
      stream.next(m.steerAngle);
      stream.next(m.steerAngle_update);
      stream.next(m.Ax);
      stream.next(m.Ax_update);
      stream.next(m.Ay);
      stream.next(m.Ay_update);
      stream.next(m.yawrate);
      stream.next(m.yawrate_update);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CanMsgVehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::CanMsgVehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::CanMsgVehicle_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Vx: ";
    Printer<double>::stream(s, indent + "  ", v.Vx);
    s << indent << "Vx_update: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Vx_update);
    s << indent << "V_whl_FL: ";
    Printer<double>::stream(s, indent + "  ", v.V_whl_FL);
    s << indent << "V_whl_FL_update: ";
    Printer<int16_t>::stream(s, indent + "  ", v.V_whl_FL_update);
    s << indent << "V_whl_FR: ";
    Printer<double>::stream(s, indent + "  ", v.V_whl_FR);
    s << indent << "V_whl_FR_update: ";
    Printer<int16_t>::stream(s, indent + "  ", v.V_whl_FR_update);
    s << indent << "V_whl_RL: ";
    Printer<double>::stream(s, indent + "  ", v.V_whl_RL);
    s << indent << "V_whl_RL_update: ";
    Printer<int16_t>::stream(s, indent + "  ", v.V_whl_RL_update);
    s << indent << "V_whl_RR: ";
    Printer<double>::stream(s, indent + "  ", v.V_whl_RR);
    s << indent << "V_whl_RR_update: ";
    Printer<int16_t>::stream(s, indent + "  ", v.V_whl_RR_update);
    s << indent << "steerAngle: ";
    Printer<double>::stream(s, indent + "  ", v.steerAngle);
    s << indent << "steerAngle_update: ";
    Printer<int16_t>::stream(s, indent + "  ", v.steerAngle_update);
    s << indent << "Ax: ";
    Printer<double>::stream(s, indent + "  ", v.Ax);
    s << indent << "Ax_update: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Ax_update);
    s << indent << "Ay: ";
    Printer<double>::stream(s, indent + "  ", v.Ay);
    s << indent << "Ay_update: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Ay_update);
    s << indent << "yawrate: ";
    Printer<double>::stream(s, indent + "  ", v.yawrate);
    s << indent << "yawrate_update: ";
    Printer<int16_t>::stream(s, indent + "  ", v.yawrate_update);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_CANMSGVEHICLE_H
