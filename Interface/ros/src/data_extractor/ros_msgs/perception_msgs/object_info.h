// Generated by gencpp from file perception_msgs/object_info.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_OBJECT_INFO_H
#define PERCEPTION_MSGS_MESSAGE_OBJECT_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct object_info_
{
  typedef object_info_<ContainerAllocator> Type;

  object_info_()
    : header()
    , obj_id(0)
    , type(0)
    , x_v(0.0)
    , heading_c(0.0)
    , heading_l(0.0)
    , heading_r(0.0)
    , heading_speed(0.0)
    , speed(0.0)
    , sensor_type(0)
    , height(0.0)
    , width(0.0)
    , length(0.0)
    , is_top_surface(false)
    , image_x(0)
    , image_y(0)
    , image_w(0)
    , image_h(0)
    , prob(0.0)  {
    }
  object_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , obj_id(0)
    , type(0)
    , x_v(0.0)
    , heading_c(0.0)
    , heading_l(0.0)
    , heading_r(0.0)
    , heading_speed(0.0)
    , speed(0.0)
    , sensor_type(0)
    , height(0.0)
    , width(0.0)
    , length(0.0)
    , is_top_surface(false)
    , image_x(0)
    , image_y(0)
    , image_w(0)
    , image_h(0)
    , prob(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _obj_id_type;
  _obj_id_type obj_id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef double _x_v_type;
  _x_v_type x_v;

   typedef double _heading_c_type;
  _heading_c_type heading_c;

   typedef double _heading_l_type;
  _heading_l_type heading_l;

   typedef double _heading_r_type;
  _heading_r_type heading_r;

   typedef double _heading_speed_type;
  _heading_speed_type heading_speed;

   typedef double _speed_type;
  _speed_type speed;

   typedef int32_t _sensor_type_type;
  _sensor_type_type sensor_type;

   typedef double _height_type;
  _height_type height;

   typedef double _width_type;
  _width_type width;

   typedef double _length_type;
  _length_type length;

   typedef uint8_t _is_top_surface_type;
  _is_top_surface_type is_top_surface;

   typedef int32_t _image_x_type;
  _image_x_type image_x;

   typedef int32_t _image_y_type;
  _image_y_type image_y;

   typedef int32_t _image_w_type;
  _image_w_type image_w;

   typedef int32_t _image_h_type;
  _image_h_type image_h;

   typedef double _prob_type;
  _prob_type prob;





  typedef boost::shared_ptr< ::perception_msgs::object_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::object_info_<ContainerAllocator> const> ConstPtr;

}; // struct object_info_

typedef ::perception_msgs::object_info_<std::allocator<void> > object_info;

typedef boost::shared_ptr< ::perception_msgs::object_info > object_infoPtr;
typedef boost::shared_ptr< ::perception_msgs::object_info const> object_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::object_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::object_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::object_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::object_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::object_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::object_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::object_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::object_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::object_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "732b97a8613625587ca2d041a60b0800";
  }

  static const char* value(const ::perception_msgs::object_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x732b97a861362558ULL;
  static const uint64_t static_value2 = 0x7ca2d041a60b0800ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::object_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/object_info";
  }

  static const char* value(const ::perception_msgs::object_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::object_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
int32 obj_id            #/*!< 目标编号 */\n\
uint8 type              #/*!< 类型: perception ObjectType */\n\
\n\
float64 x_v             #/*!< 纵向距离(米) */\n\
float64 heading_c       #/*!< 中心点heading角(弧度单位) */\n\
float64 heading_l       #/*!< 左侧端点heading角, 相机(弧度单位) */\n\
float64 heading_r       #/*!< 右侧端点heading角, 相机(弧度单位) */\n\
float64 heading_speed   #/*!< 运行的速度方向(弧度单位) */\n\
float64 speed           #/*!< 速度, 雷达(米/秒) */\n\
\n\
int32 sensor_type		#/* !< 0: camera; 1: radar; 2: fused */\n\
\n\
##/*! 注意：当只有雷达检测出来的时候都设置为100米，宽度为-100米*/\n\
float64 height          #/* !< object 高度(米) */\n\
float64 width           #/* !< object 宽度(米) */\n\
float64 length          #/* !< object 长度(米) */\n\
bool is_top_surface     #/* !< 是否为车辆的上表面，相对x轴方向 */\n\
\n\
int32 image_x   \n\
int32 image_y\n\
int32 image_w\n\
int32 image_h\n\
\n\
float64 prob            #/* !< object 置信度0-1 */\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::perception_msgs::object_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::object_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.obj_id);
      stream.next(m.type);
      stream.next(m.x_v);
      stream.next(m.heading_c);
      stream.next(m.heading_l);
      stream.next(m.heading_r);
      stream.next(m.heading_speed);
      stream.next(m.speed);
      stream.next(m.sensor_type);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.length);
      stream.next(m.is_top_surface);
      stream.next(m.image_x);
      stream.next(m.image_y);
      stream.next(m.image_w);
      stream.next(m.image_h);
      stream.next(m.prob);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::object_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::object_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "obj_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.obj_id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "x_v: ";
    Printer<double>::stream(s, indent + "  ", v.x_v);
    s << indent << "heading_c: ";
    Printer<double>::stream(s, indent + "  ", v.heading_c);
    s << indent << "heading_l: ";
    Printer<double>::stream(s, indent + "  ", v.heading_l);
    s << indent << "heading_r: ";
    Printer<double>::stream(s, indent + "  ", v.heading_r);
    s << indent << "heading_speed: ";
    Printer<double>::stream(s, indent + "  ", v.heading_speed);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "sensor_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_type);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
    s << indent << "is_top_surface: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_top_surface);
    s << indent << "image_x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_x);
    s << indent << "image_y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_y);
    s << indent << "image_w: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_w);
    s << indent << "image_h: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_h);
    s << indent << "prob: ";
    Printer<double>::stream(s, indent + "  ", v.prob);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_OBJECT_INFO_H
