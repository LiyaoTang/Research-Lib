// Generated by gencpp from file perception_msgs/lane_mark_info.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_LANE_MARK_INFO_H
#define PERCEPTION_MSGS_MESSAGE_LANE_MARK_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct lane_mark_info_
{
  typedef lane_mark_info_<ContainerAllocator> Type;

  lane_mark_info_()
    : header()
    , mark_type(0)
    , mark_color(0)
    , a(0.0)
    , b(0.0)
    , c(0.0)
    , d(0.0)
    , x_start(0.0)
    , x_end(0.0)
    , image_a(0.0)
    , image_b(0.0)
    , image_c(0.0)
    , image_d(0.0)
    , image_x_start(0.0)
    , image_x_end(0.0)  {
    }
  lane_mark_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mark_type(0)
    , mark_color(0)
    , a(0.0)
    , b(0.0)
    , c(0.0)
    , d(0.0)
    , x_start(0.0)
    , x_end(0.0)
    , image_a(0.0)
    , image_b(0.0)
    , image_c(0.0)
    , image_d(0.0)
    , image_x_start(0.0)
    , image_x_end(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mark_type_type;
  _mark_type_type mark_type;

   typedef uint8_t _mark_color_type;
  _mark_color_type mark_color;

   typedef double _a_type;
  _a_type a;

   typedef double _b_type;
  _b_type b;

   typedef double _c_type;
  _c_type c;

   typedef double _d_type;
  _d_type d;

   typedef double _x_start_type;
  _x_start_type x_start;

   typedef double _x_end_type;
  _x_end_type x_end;

   typedef double _image_a_type;
  _image_a_type image_a;

   typedef double _image_b_type;
  _image_b_type image_b;

   typedef double _image_c_type;
  _image_c_type image_c;

   typedef double _image_d_type;
  _image_d_type image_d;

   typedef double _image_x_start_type;
  _image_x_start_type image_x_start;

   typedef double _image_x_end_type;
  _image_x_end_type image_x_end;





  typedef boost::shared_ptr< ::perception_msgs::lane_mark_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::lane_mark_info_<ContainerAllocator> const> ConstPtr;

}; // struct lane_mark_info_

typedef ::perception_msgs::lane_mark_info_<std::allocator<void> > lane_mark_info;

typedef boost::shared_ptr< ::perception_msgs::lane_mark_info > lane_mark_infoPtr;
typedef boost::shared_ptr< ::perception_msgs::lane_mark_info const> lane_mark_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::lane_mark_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::lane_mark_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::lane_mark_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::lane_mark_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::lane_mark_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::lane_mark_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::lane_mark_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::lane_mark_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::lane_mark_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a37f089753b959f5079b34c1b8528a51";
  }

  static const char* value(const ::perception_msgs::lane_mark_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa37f089753b959f5ULL;
  static const uint64_t static_value2 = 0x079b34c1b8528a51ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::lane_mark_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/lane_mark_info";
  }

  static const char* value(const ::perception_msgs::lane_mark_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::lane_mark_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint8 mark_type      #/*!< 类型 LaneMarkingType*/\n\
uint8 mark_color     #/*!< 类型 LaneMarkingColor */\n\
float64 a\n\
float64 b\n\
float64 c\n\
float64 d            # /* y = a * pow(x,3) + b * pow(x,2) + c * x + d */\n\
float64 x_start      # /*!< 纵向起始点(米) */\n\
float64 x_end        # /*!< 纵向终止点(米) */\n\
\n\
float64 image_a\n\
float64 image_b\n\
float64 image_c\n\
float64 image_d\n\
float64 image_x_start\n\
float64 image_x_end\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::perception_msgs::lane_mark_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::lane_mark_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mark_type);
      stream.next(m.mark_color);
      stream.next(m.a);
      stream.next(m.b);
      stream.next(m.c);
      stream.next(m.d);
      stream.next(m.x_start);
      stream.next(m.x_end);
      stream.next(m.image_a);
      stream.next(m.image_b);
      stream.next(m.image_c);
      stream.next(m.image_d);
      stream.next(m.image_x_start);
      stream.next(m.image_x_end);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lane_mark_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::lane_mark_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::lane_mark_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mark_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mark_type);
    s << indent << "mark_color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mark_color);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    Printer<double>::stream(s, indent + "  ", v.b);
    s << indent << "c: ";
    Printer<double>::stream(s, indent + "  ", v.c);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "x_start: ";
    Printer<double>::stream(s, indent + "  ", v.x_start);
    s << indent << "x_end: ";
    Printer<double>::stream(s, indent + "  ", v.x_end);
    s << indent << "image_a: ";
    Printer<double>::stream(s, indent + "  ", v.image_a);
    s << indent << "image_b: ";
    Printer<double>::stream(s, indent + "  ", v.image_b);
    s << indent << "image_c: ";
    Printer<double>::stream(s, indent + "  ", v.image_c);
    s << indent << "image_d: ";
    Printer<double>::stream(s, indent + "  ", v.image_d);
    s << indent << "image_x_start: ";
    Printer<double>::stream(s, indent + "  ", v.image_x_start);
    s << indent << "image_x_end: ";
    Printer<double>::stream(s, indent + "  ", v.image_x_end);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_LANE_MARK_INFO_H
