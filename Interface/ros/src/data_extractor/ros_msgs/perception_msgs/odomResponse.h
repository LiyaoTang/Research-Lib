// Generated by gencpp from file perception_msgs/odomResponse.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_ODOMRESPONSE_H
#define PERCEPTION_MSGS_MESSAGE_ODOMRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <perception_msgs/fused_odom.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct odomResponse_
{
  typedef odomResponse_<ContainerAllocator> Type;

  odomResponse_()
    : sum(0)
    , odom()  {
    }
  odomResponse_(const ContainerAllocator& _alloc)
    : sum(0)
    , odom(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _sum_type;
  _sum_type sum;

   typedef  ::perception_msgs::fused_odom_<ContainerAllocator>  _odom_type;
  _odom_type odom;





  typedef boost::shared_ptr< ::perception_msgs::odomResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::odomResponse_<ContainerAllocator> const> ConstPtr;

}; // struct odomResponse_

typedef ::perception_msgs::odomResponse_<std::allocator<void> > odomResponse;

typedef boost::shared_ptr< ::perception_msgs::odomResponse > odomResponsePtr;
typedef boost::shared_ptr< ::perception_msgs::odomResponse const> odomResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::odomResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::odomResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::odomResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::odomResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::odomResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::odomResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::odomResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::odomResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::odomResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ef0f1045670f5761cff92ee72ae5807";
  }

  static const char* value(const ::perception_msgs::odomResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ef0f1045670f576ULL;
  static const uint64_t static_value2 = 0x1cff92ee72ae5807ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::odomResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/odomResponse";
  }

  static const char* value(const ::perception_msgs::odomResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::odomResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 sum\n\
perception_msgs/fused_odom odom\n\
\n\
\n\
================================================================================\n\
MSG: perception_msgs/fused_odom\n\
Header header\n\
uint64 time_ms\n\
uint64 time_us\n\
uint64 time_ns\n\
float64 time_s_recall_dt   # delta time recall_time - called_time in second(s)\n\
float64 longitude   # odom longitude\n\
float64 latitude    # odom latitude\n\
\n\
#  y(north)\n\
#  ^\n\
#  |\n\
#  | \n\
#  o------>x(east)\n\
float64 mercator_x  # odom mercator_x\n\
float64 mercator_y  # odom mercator_y\n\
float64 mercator_z  # odom mercator_z\n\
float64 acc_x_filtered\n\
float64 acc_y_filtered\n\
float64 acc_z_filtered\n\
float64 gyro_x_filtered\n\
float64 gyro_y_filtered\n\
float64 gyro_z_filtered\n\
float64 vel_x\n\
float64 vel_y\n\
float64 vel_z\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
float64 gyro_bias_x\n\
float64 gyro_bias_y\n\
float64 gyro_bias_z\n\
float64 acc_scale_x\n\
float64 acc_scale_y\n\
float64 acc_scale_z\n\
float64 acc_bias_x\n\
float64 acc_bias_y\n\
float64 acc_bias_z\n\
# quaternion\n\
float64 q1\n\
float64 q2\n\
float64 q3\n\
float64 q4\n\
float64 yaw_rad     # rad/s\n\
float64 speed       # m/s\n\
float64 current_day_sec # current_day_second\n\
int64 px2_time_us   # \n\
\n\
# gps\n\
float64 gps_longitude\n\
float64 gps_latitude\n\
float64 gps_heading\n\
float64 gps_speed\n\
uint64  gps_utc_time_us\n\
\n\
int64 section_id    # section_id in had map, if not valid, return -1\n\
int64 lane_id       # lane id in had map, if not valid, return -1\n\
\n\
bool  odom_healthy  # indicate odom health status\n\
\n\
# guide_point, last localization result\n\
perception_msgs/guide_point guide_point\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: perception_msgs/guide_point\n\
# GuidancePointType type;\n\
# double distance;\n\
# int lane_id;\n\
# int section_id;\n\
# GPSCoord gps_coord;\n\
\n\
int64 guide_point_type\n\
float64 distance\n\
int64 lane_id\n\
int64 section_id\n\
float64 gps_longitude\n\
float64 gps_latitude\n\
";
  }

  static const char* value(const ::perception_msgs::odomResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::odomResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sum);
      stream.next(m.odom);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct odomResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::odomResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::odomResponse_<ContainerAllocator>& v)
  {
    s << indent << "sum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.sum);
    s << indent << "odom: ";
    s << std::endl;
    Printer< ::perception_msgs::fused_odom_<ContainerAllocator> >::stream(s, indent + "  ", v.odom);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_ODOMRESPONSE_H
