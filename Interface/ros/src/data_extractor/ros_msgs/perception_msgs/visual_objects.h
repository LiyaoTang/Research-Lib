// Generated by gencpp from file perception_msgs/visual_objects.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_VISUAL_OBJECTS_H
#define PERCEPTION_MSGS_MESSAGE_VISUAL_OBJECTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <perception_msgs/visual_object_info.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct visual_objects_
{
  typedef visual_objects_<ContainerAllocator> Type;

  visual_objects_()
    : header()
    , objects()
    , timestamp_us(0)  {
    }
  visual_objects_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , objects(_alloc)
    , timestamp_us(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::perception_msgs::visual_object_info_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::perception_msgs::visual_object_info_<ContainerAllocator> >::other >  _objects_type;
  _objects_type objects;

   typedef uint64_t _timestamp_us_type;
  _timestamp_us_type timestamp_us;





  typedef boost::shared_ptr< ::perception_msgs::visual_objects_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::visual_objects_<ContainerAllocator> const> ConstPtr;

}; // struct visual_objects_

typedef ::perception_msgs::visual_objects_<std::allocator<void> > visual_objects;

typedef boost::shared_ptr< ::perception_msgs::visual_objects > visual_objectsPtr;
typedef boost::shared_ptr< ::perception_msgs::visual_objects const> visual_objectsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::visual_objects_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::visual_objects_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::visual_objects_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::visual_objects_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::visual_objects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::visual_objects_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::visual_objects_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::visual_objects_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::visual_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3c1d4c24e5b4ff17bc98a44c579ddd49";
  }

  static const char* value(const ::perception_msgs::visual_objects_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3c1d4c24e5b4ff17ULL;
  static const uint64_t static_value2 = 0xbc98a44c579ddd49ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::visual_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/visual_objects";
  }

  static const char* value(const ::perception_msgs::visual_objects_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::visual_objects_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
visual_object_info[] objects\n\
uint64 timestamp_us\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: perception_msgs/visual_object_info\n\
int32 parts\n\
float64[] pts8                   #//2Dto3D, pts8.resize(16), x, y...\n\
float64[] front_upper_left         #//front box upper-left corner: x1, y1\n\
float64[] front_lower_right        #//front box  lower-right corner: x2, y2\n\
float64[] back_upper_left            #//front box upper-left corner: x1, y1\n\
float64[] back_lower_right           #//front box  lower-right corner: x2, y2\n\
int32 id = 0                         #// object id per frame\n\
int32 turn_signal_light\n\
int32 brake_light\n\
int32 type                           #// Object classification type.\n\
float64[] type_probs                 #// Probability of each type, used for track type.\n\
float64[] object_feature\n\
int32 internal_type                  #// Internal object classification type.\n\
float64[] internal_type_probs   #// Internal probability of each type, used for track type.\n\
\n\
#// 2D bounding box information (in pixel)\n\
#// upper-left corner: x1, y1\n\
float64[] upper_left\n\
#// lower-right corner: x2, y2\n\
float64[] lower_right\n\
#// tmp for upper-left & lower-right corner point\n\
float64[] upper_left_tmp\n\
float64[] lower_right_tmp\n\
\n\
#// this is `alpha` angle from KITTI: Observation angle of object, ranging [-pi..pi]\n\
float64 alpha\n\
float64 score\n\
#// Truncation ratio prediction from DNN. 0.0 means non-truncated box ( or < threshold, ex: 0.05)\n\
float64 truncated_horizontal\n\
float64 truncated_vertical\n\
\n\
#// 3D bounding box information\n\
#// main direction\n\
float64[] direction\n\
\n\
#// the yaw angle, theta = 0.0 <=> direction = (1, 0, 0)\n\
#// `theta` is `rotation_y` from KITTI: Rotation ry around Y-axis\n\
#// in camera coordinates before track [-pi..pi]\n\
#// in world coordinates in and after track [-pi..pi]\n\
float64 theta\n\
\n\
#// GROUND center of the object (cx, cy, z_min)\n\
#// From the 2409 test data, it's just the CENTER of the object (cx, cy, cz)\n\
#// in camera coordinates before track [-pi..pi]\n\
#// in world coordinates in and after track [-pi..pi]\n\
float64[] center\n\
\n\
float64[] position_uncertainty#// noise covariance matrix for uncertainty of position and velocity\n\
float64[] velocity_uncertainty\n\
\n\
#// size of the oriented bbox, length is the size in the main direction\n\
float64 length\n\
float64 width\n\
float64 height\n\
\n\
float64 distance    #// Distance to object physical center from lidar origin\n\
int32 distance_status\n\
\n\
float64 azimuth     #// Azimuth angle viewed in lidar space (radian)\n\
\n\
int32 track_id      #// tracking information\n\
float64 track_score\n\
float64[] velocity\n\
\n\
float64 tracking_time       #// age of the tracked object\n\
float64 latest_tracked_time\n\
";
  }

  static const char* value(const ::perception_msgs::visual_objects_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::visual_objects_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.objects);
      stream.next(m.timestamp_us);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct visual_objects_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::visual_objects_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::visual_objects_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_msgs::visual_object_info_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "timestamp_us: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp_us);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_VISUAL_OBJECTS_H
