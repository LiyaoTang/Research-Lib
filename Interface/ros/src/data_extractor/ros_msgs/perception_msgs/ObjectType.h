// Generated by gencpp from file perception_msgs/ObjectType.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_OBJECTTYPE_H
#define PERCEPTION_MSGS_MESSAGE_OBJECTTYPE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_msgs
{
template <class ContainerAllocator>
struct ObjectType_
{
  typedef ObjectType_<ContainerAllocator> Type;

  ObjectType_()
    {
    }
  ObjectType_(const ContainerAllocator& _alloc)
    {
  (void)_alloc;
    }





  enum {
    CAR = 0u,
    V_CAR = 1u,
    BIG_TRUCK = 2u,
    SMALL_TRUCK = 3u,
    BUS = 4u,
    CYCLELIST = 5u,
    MISC = 6u,
    PERSON = 7u,
    OBSTACLE = 8u,
    UNKNOWN = 255u,
  };


  typedef boost::shared_ptr< ::perception_msgs::ObjectType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::ObjectType_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectType_

typedef ::perception_msgs::ObjectType_<std::allocator<void> > ObjectType;

typedef boost::shared_ptr< ::perception_msgs::ObjectType > ObjectTypePtr;
typedef boost::shared_ptr< ::perception_msgs::ObjectType const> ObjectTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::ObjectType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::ObjectType_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::ObjectType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::ObjectType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::ObjectType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::ObjectType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::ObjectType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::ObjectType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::ObjectType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bbe63004ffddae9c45cea319d87a5ede";
  }

  static const char* value(const ::perception_msgs::ObjectType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbbe63004ffddae9cULL;
  static const uint64_t static_value2 = 0x45cea319d87a5edeULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::ObjectType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/ObjectType";
  }

  static const char* value(const ::perception_msgs::ObjectType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::ObjectType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 CAR=0         # 汽车，吉普车，SUV，面包车\n\
uint8 V_CAR=1       # 虚拟障碍物\n\
uint8 BIG_TRUCK=2   # 卡车，箱式卡车，皮卡车，大篷车，洒水车大型车辆，且后部/装载区域与驾驶室物理分离\n\
uint8 SMALL_TRUCK=3 # 快递三轮车、农用机动车等, 小型车辆，且后部/装载区域与驾驶室物理分离\n\
uint8 BUS=4         # 公交车、客车\n\
uint8 CYCLELIST=5   # 驾驶中的自行车、驾驶中的电动车、驾驶中的摩托车\n\
uint8 MISC=6        # 马车，挖掘机，推土机、电车,不常见车辆\n\
uint8 PERSON=7\n\
uint8 OBSTACLE=8\n\
uint8 UNKNOWN=255\n\
";
  }

  static const char* value(const ::perception_msgs::ObjectType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::ObjectType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream&, T)
    {}

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::ObjectType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream&, const std::string&, const ::perception_msgs::ObjectType_<ContainerAllocator>&)
  {}
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_OBJECTTYPE_H
