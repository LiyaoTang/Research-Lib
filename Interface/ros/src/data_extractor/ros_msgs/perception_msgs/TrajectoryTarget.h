// Generated by gencpp from file perception_msgs/TrajectoryTarget.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_TRAJECTORYTARGET_H
#define PERCEPTION_MSGS_MESSAGE_TRAJECTORYTARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <perception_msgs/TrajectoryTargetPoint.h>

namespace perception_msgs
{
template <class ContainerAllocator>
struct TrajectoryTarget_
{
  typedef TrajectoryTarget_<ContainerAllocator> Type;

  TrajectoryTarget_()
    : header()
    , Trajectory()
    , Dis_Lane2Car(0.0)
    , Yaw_Lane2Car(0.0)
    , target_speed(0.0)
    , theta(0.0)
    , current_velocity(0.0)
    , target_velocity(0.0)
    , source_ids()  {
    }
  TrajectoryTarget_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Trajectory(_alloc)
    , Dis_Lane2Car(0.0)
    , Yaw_Lane2Car(0.0)
    , target_speed(0.0)
    , theta(0.0)
    , current_velocity(0.0)
    , target_velocity(0.0)
    , source_ids(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::perception_msgs::TrajectoryTargetPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::perception_msgs::TrajectoryTargetPoint_<ContainerAllocator> >::other >  _Trajectory_type;
  _Trajectory_type Trajectory;

   typedef double _Dis_Lane2Car_type;
  _Dis_Lane2Car_type Dis_Lane2Car;

   typedef double _Yaw_Lane2Car_type;
  _Yaw_Lane2Car_type Yaw_Lane2Car;

   typedef double _target_speed_type;
  _target_speed_type target_speed;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _current_velocity_type;
  _current_velocity_type current_velocity;

   typedef double _target_velocity_type;
  _target_velocity_type target_velocity;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _source_ids_type;
  _source_ids_type source_ids;





  typedef boost::shared_ptr< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryTarget_

typedef ::perception_msgs::TrajectoryTarget_<std::allocator<void> > TrajectoryTarget;

typedef boost::shared_ptr< ::perception_msgs::TrajectoryTarget > TrajectoryTargetPtr;
typedef boost::shared_ptr< ::perception_msgs::TrajectoryTarget const> TrajectoryTargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::TrajectoryTarget_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5fd5e7662fa25a19c2405cd48bdcd9dd";
  }

  static const char* value(const ::perception_msgs::TrajectoryTarget_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5fd5e7662fa25a19ULL;
  static const uint64_t static_value2 = 0xc2405cd48bdcd9ddULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/TrajectoryTarget";
  }

  static const char* value(const ::perception_msgs::TrajectoryTarget_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# time information\n\
Header header\n\
\n\
TrajectoryTargetPoint[] Trajectory\n\
float64 Dis_Lane2Car # unit: m\n\
float64 Yaw_Lane2Car # unit: rad\n\
float64 target_speed # unit: m/s\n\
\n\
float64 theta  # from ato; unit: rad\n\
float64 current_velocity  # from vehicle_speed topic; unit:  m/s\n\
float64 target_velocity  # from ato; unit:  m/s\n\
uint32[] source_ids  # 1. road infos  2. vehicle infos  3. vehicle speed 4,cpt  5,steerAngle\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: perception_msgs/TrajectoryTargetPoint\n\
float64 x  # unit :m\n\
float64 y  # unit: m\n\
float64 theta  #unit: rad\n\
float64 curvature # unit: 1/m\n\
float64 velocity  # unit:  m/s\n\
";
  }

  static const char* value(const ::perception_msgs::TrajectoryTarget_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Trajectory);
      stream.next(m.Dis_Lane2Car);
      stream.next(m.Yaw_Lane2Car);
      stream.next(m.target_speed);
      stream.next(m.theta);
      stream.next(m.current_velocity);
      stream.next(m.target_velocity);
      stream.next(m.source_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryTarget_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::TrajectoryTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::TrajectoryTarget_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Trajectory[]" << std::endl;
    for (size_t i = 0; i < v.Trajectory.size(); ++i)
    {
      s << indent << "  Trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::perception_msgs::TrajectoryTargetPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.Trajectory[i]);
    }
    s << indent << "Dis_Lane2Car: ";
    Printer<double>::stream(s, indent + "  ", v.Dis_Lane2Car);
    s << indent << "Yaw_Lane2Car: ";
    Printer<double>::stream(s, indent + "  ", v.Yaw_Lane2Car);
    s << indent << "target_speed: ";
    Printer<double>::stream(s, indent + "  ", v.target_speed);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "current_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.current_velocity);
    s << indent << "target_velocity: ";
    Printer<double>::stream(s, indent + "  ", v.target_velocity);
    s << indent << "source_ids[]" << std::endl;
    for (size_t i = 0; i < v.source_ids.size(); ++i)
    {
      s << indent << "  source_ids[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.source_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_TRAJECTORYTARGET_H
