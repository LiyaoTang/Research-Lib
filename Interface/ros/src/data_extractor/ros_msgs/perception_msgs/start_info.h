// Generated by gencpp from file perception_msgs/start_info.msg
// DO NOT EDIT!


#ifndef PERCEPTION_MSGS_MESSAGE_START_INFO_H
#define PERCEPTION_MSGS_MESSAGE_START_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace perception_msgs
{
template <class ContainerAllocator>
struct start_info_
{
  typedef start_info_<ContainerAllocator> Type;

  start_info_()
    : det_time_us(0)  {
    }
  start_info_(const ContainerAllocator& _alloc)
    : det_time_us(0)  {
  (void)_alloc;
    }



   typedef int64_t _det_time_us_type;
  _det_time_us_type det_time_us;





  typedef boost::shared_ptr< ::perception_msgs::start_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::perception_msgs::start_info_<ContainerAllocator> const> ConstPtr;

}; // struct start_info_

typedef ::perception_msgs::start_info_<std::allocator<void> > start_info;

typedef boost::shared_ptr< ::perception_msgs::start_info > start_infoPtr;
typedef boost::shared_ptr< ::perception_msgs::start_info const> start_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::perception_msgs::start_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::perception_msgs::start_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace perception_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'perception_msgs': ['/home/shawn/baidu/ai-auto/l3-apollo/catkin_build/src/modules/ros_msgs/perception/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::start_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::perception_msgs::start_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::start_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::perception_msgs::start_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::start_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::perception_msgs::start_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::perception_msgs::start_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ec7c50af68bcb3153fab0171274e478";
  }

  static const char* value(const ::perception_msgs::start_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ec7c50af68bcb31ULL;
  static const uint64_t static_value2 = 0x53fab0171274e478ULL;
};

template<class ContainerAllocator>
struct DataType< ::perception_msgs::start_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "perception_msgs/start_info";
  }

  static const char* value(const ::perception_msgs::start_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::perception_msgs::start_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 det_time_us         # det_time_us = 读取gps文件中第一条记录时的当前系统时间 - gps文件中第一条记录的时间 + 1秒(为了等待其他node都准备好）\n\
";
  }

  static const char* value(const ::perception_msgs::start_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::perception_msgs::start_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.det_time_us);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct start_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::perception_msgs::start_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::perception_msgs::start_info_<ContainerAllocator>& v)
  {
    s << indent << "det_time_us: ";
    Printer<int64_t>::stream(s, indent + "  ", v.det_time_us);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PERCEPTION_MSGS_MESSAGE_START_INFO_H
